{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///node_modules/moment/locale sync ^\\.\\/.*$","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/difference/difference.component.ts","webpack:///src/app/difference/difference.component.html","webpack:///src/app/enum-keys-pipe.ts","webpack:///src/app/grouping/grouping.component.html","webpack:///src/app/grouping/grouping.component.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/rest.service.ts","webpack:///src/app/select-graph/select-graph.component.ts","webpack:///src/app/select-graph/select-graph.component.html","webpack:///src/app/snapshot/snapshot.component.ts","webpack:///src/app/snapshot/snapshot.component.html","webpack:///src/app/time-stamp/time-stamp.component.ts","webpack:///src/app/time-stamp/time-stamp.component.html","webpack:///src/environments/environment.ts","webpack:///src/gen/generatedAngular/api.module.ts","webpack:///src/gen/generatedAngular/api/api.ts","webpack:///src/gen/generatedAngular/api/default.service.ts","webpack:///src/gen/generatedAngular/configuration.ts","webpack:///src/gen/generatedAngular/index.ts","webpack:///src/gen/generatedAngular/model/aggregationType.ts","webpack:///src/gen/generatedAngular/model/chronoField.ts","webpack:///src/gen/generatedAngular/model/chronoUnit.ts","webpack:///src/gen/generatedAngular/model/groupingType.ts","webpack:///src/gen/generatedAngular/model/models.ts","webpack:///src/gen/generatedAngular/model/temporalPredicate.ts","webpack:///src/gen/generatedAngular/model/timeDimension.ts","webpack:///src/gen/generatedAngular/model/timeField.ts","webpack:///src/gen/generatedAngular/variables.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","map","webpackContext","webpackContextResolve","__webpack_require__","o","webpackContextKeys","Object","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DifferenceComponent","restService","fromTimeStamp","toTimeStamp","timeDim","aggrPrefixes","colorMap","useForceLayout","useDefaultLabel","maxVertexCount","maxEdgeCount","cy","container","document","getElementById","style","css","node","data","label","diff","_diff","edge","ready","elements","unselectify","on","cyTarget","neighborhood","add","addClass","removeClass","console","log","element","key","labels","forEach","r","g","b","Math","floor","random","difference","dbName","VALIDTIME","TRANSACTIONTIME","graph","remove","Set","i","nodes","length","edges","generateRandomColors","latNyc","longNyc","elementDefinitions","elementDef","lat","long","properties","property","parseFloat","value","position","x","y","forceLayout","name","stop","animate","refresh","fit","padding","boundingBox","undefined","randomize","debug","nodeRepulsion","nodeOverlap","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","initialTemp","coolingFactor","minTemp","timeStamp","onDbNameChanged","onFromChanged","onToChanged","onExecute","EnumKeysPipe","GroupingComponent","groupingKeys","aggregationFunctions","chronoFieldEnum","chronoUnitEnum","aggregationFunctionEnum","timeFieldEnum","timeDimensionEnum","groupingTypeEnum","color","result","toString","substr","push","groupingType","NOTHING","labelSpecific","forVertex","pop","grouping","lay","layout","run","getKeysAndLabels","keysAndLabels","setKeysAndLabels","edgeLabels","concat","vertexLabels","filterKeysForLabel","index","obj","searchedLabel","applicableVertexKeys","vertexKeys","filter","vertexKey","correctLabel","applicableEdgeKeys","edgeKeys","edgeKey","numerical","aggrType","MAXTIME","MINDURATION","MINTIME","AVERAGEDURATION","MAXDURATION","MIN","MAX","SUM","DURATION","TIMEINTERVAL","TIMESTAMP","TIMESTAMPFIELD","addGroupingKey","addAggregationFunction","HomeComponent","RestService","defaultService","timeDimension","snapshotJson","predicate","startDate","endDate","snapshot","toPromise","from","to","differenceJson","vertexAggrFuncs","aggrFunc","forEdges","edgeAggrFuncs","groupingJson","getKeys","getGraphs","getGraph","providedIn","SelectGraphComponent","dbEvent","graphs","availableGraphs","emit","selectedGraph","publishChanges","SnapshotComponent","onTimeStampChanged","TimeStampComponent","timeStampEvent","predicates","ASOF","endRequired","startPicker","_selectedChanged","subscribe","endPicker","selectedPredicate","_selected","toDate","environment","production","ApiModule","parentModule","http","configurationFactory","ngModule","provide","useFactory","APIS","DefaultService","httpClient","basePath","configuration","defaultHeaders","consumes","form","consume","differenceRequest","observe","reportProgress","headers","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","set","httpContentTypeSelected","selectHeaderContentType","post","withCredentials","databaseName","encodeURIComponent","String","get","groupingRequest","snapshotRequest","Configuration","configurationParameters","apiKeys","username","password","accessToken","contentTypes","type","find","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","AggregationType","COUNT","NONE","ChronoField","NANOOFSECOND","NANOOFDAY","MICROOFSECOND","MICROOFDAY","MILLIOFSECOND","MILLIOFDAY","SECONDOFMINUTE","SECONDOFDAY","MINUTEOFHOUR","MINUTEOFDAY","HOUROFAMPM","HOUROFDAY","CLOCKHOUROFDAY","AMPMOFDAY","DAYOFWEEK","ALIGNEDDAYOFWEEKINMONTH","ALIGNEDDAYOFWEEKINYEAR","DAYOFMONTH","DAYOFYEAR","EPOCHDAY","ALIGNEDWEEKOFMONTH","ALIGNEDWEEKOFYEAR","MONTHOFYEAR","PROLEPTICMONTH","YEAROFERA","YEAR","ERA","INTANTSECONDS","OFFSETSECONDS","ChronoUnit","CENTURIES","DAYS","DECADES","ERAS","FOREVER","HALFDAYS","HOURS","MICROS","MILLENIA","MILLIS","MINUTES","MONTHS","NANOS","SECONDS","WEEKS","YEARS","GroupingType","LABEL","PROPERTY","TemporalPredicate","ALL","BETWEEN","CONTAINEDIN","CREATEDIN","DELETEDIN","FROMTO","OVERLAPS","PRECEDES","SUCCEEDS","VALIDDURING","TimeDimension","TimeField","FROM","TO","BASE_PATH","COLLECTION_FORMATS","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ClientTemporalGraph';\r\n}\r\n","<app-home></app-home>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule} from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { SelectGraphComponent } from './select-graph/select-graph.component';\r\nimport { SnapshotComponent } from './snapshot/snapshot.component';\r\nimport { DifferenceComponent } from './difference/difference.component';\r\nimport { GroupingComponent } from './grouping/grouping.component'\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { TimeStampComponent } from './time-stamp/time-stamp.component';\r\nimport { NgxMatDatetimePickerModule, NgxMatTimepickerModule } from '@angular-material-components/datetime-picker';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { DefaultService } from 'src/gen/generatedAngular';\r\nimport { RestService } from './rest.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport { EnumKeysPipe } from './enum-keys-pipe';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    SelectGraphComponent,\r\n    SnapshotComponent,\r\n    DifferenceComponent,\r\n    GroupingComponent,\r\n    TimeStampComponent,\r\n    EnumKeysPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    NgxMatTimepickerModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatMomentModule,\r\n    HttpClientModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    FlexLayoutModule,\r\n    MatRadioModule,\r\n    MatCardModule,\r\n    MatSlideToggleModule,\r\n    MatDividerModule,\r\n    MatButtonToggleModule\r\n  ],\r\n  providers: [\r\n  DefaultService,\r\n  RestService  \r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport * as cytoscape from 'cytoscape';\r\nimport { Graph, TimeStamp, TimeDimension, Node } from 'src/gen/generatedAngular';\r\n\r\n@Component({\r\n  selector: 'app-difference',\r\n  templateUrl: './difference.component.html',\r\n  styleUrls: ['./difference.component.scss']\r\n})\r\nexport class DifferenceComponent implements AfterViewInit {\r\n\r\n\r\n  public fromTimeStamp = null;\r\n  public toTimeStamp = null;\r\n  public dbName: string;\r\n  private cy: cytoscape.Core;\r\n  public timeDim = \"valid\";\r\n\r\n  public aggrPrefixes = ['min ', 'max ', 'sum '];\r\n\r\n  /**\r\n   * Map of all possible values for the vertexLabelKey to a color in RGB format.\r\n   * @type {{}}\r\n   */\r\n  public colorMap = {};\r\n\r\n  /**\r\n   * Buffers the last graph response from the server to improve redrawing speed.\r\n   */\r\n  public bufferedData;\r\n\r\n  /**\r\n   * True, if the graph layout should be force based\r\n   * @type {boolean}\r\n   */\r\n  public useForceLayout = true;\r\n\r\n  /**\r\n   * True, if the default label should be used\r\n   * @type {boolean}\r\n   */\r\n  public useDefaultLabel = true;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of vertices\r\n   * @type {number}\r\n   */\r\n  public maxVertexCount = 0;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of edges\r\n   * @type {number}\r\n   */\r\n  public maxEdgeCount = 0;\r\n\r\n  constructor(public restService: RestService) { }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n    this.cy = cytoscape(<any>{\r\n      container: document.getElementById('differenceCanvas'),\r\n      style: (<any>cytoscape).stylesheet()\r\n        .selector('node')\r\n        .css({\r\n          // define label content and font\r\n          'content': (node) => {\r\n            return node.data().label;\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '10px',\r\n          'text-valign': 'center',\r\n          'color': 'black',\r\n          'background-color': (node) => {\r\n            let diff: string = node.data('properties')._diff;\r\n            if (diff === \"-1\") {\r\n              return '#D55';\r\n            }\r\n            else if (diff === \"1\") {\r\n              return '#5D5';\r\n            }\r\n            else {\r\n              return '#55D';\r\n            }\r\n          },\r\n          'width': '60px',\r\n          'height': '60px',\r\n          'text-wrap': 'wrap'\r\n        })\r\n        .selector('edge')\r\n        .css({\r\n          'curve-style': 'haystack',\r\n          // layout of edge and edge label\r\n          'content': (edge) => {\r\n            return edge.data('label');\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '30',\r\n          'line-color': (edge) => {\r\n            let diff: string = edge.data('properties')._diff;\r\n            if (diff === \"-1\") {\r\n              return '#D22';\r\n            }\r\n            else if (diff === \"1\") {\r\n              return '#2D2';\r\n            }\r\n            else {\r\n              return '#000';\r\n            }\r\n          },\r\n          // width of edges can be determined by property count\r\n          // count specifies that the edge represents 1 or more other edges\r\n          'width': 5,\r\n          'target-arrow-shape': 'triangle',\r\n          'target-arrow-color': '#000'\r\n        })\r\n        // properties of edges and vertices in special states, e.g. invisible or faded\r\n        .selector('.faded')\r\n        .css({\r\n          'opacity': 0.25,\r\n          'text-opacity': 0\r\n        })\r\n        .selector('.invisible')\r\n        .css({\r\n          'opacity': 0,\r\n          'text-opacity': 0\r\n        }),\r\n      ready: () => {\r\n        if (this.cy) {\r\n          this.cy.elements().unselectify();\r\n          /* if a vertex is selected, fade all edges and vertices\r\n          that are not in direct neighborhood of the vertex */\r\n          this.cy.on('tap', 'node', (e: any) => {\r\n            let node = e.cyTarget;\r\n            let neighborhood = node.neighborhood().add(node);\r\n\r\n            this.cy.elements().addClass('faded');\r\n            neighborhood.removeClass('faded');\r\n          });\r\n          // remove fading by clicking somewhere else\r\n          this.cy.on('tap', (e: any) => {\r\n\r\n            if (e.cyTarget === this.cy) {\r\n              this.cy.elements().removeClass('faded');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n    console.log(this.cy);\r\n  }\r\n  getLabel(element, key, useDefaultLabel) {\r\n    let label = '';\r\n    if (!useDefaultLabel && key !== 'label') {\r\n      label += element.data('properties')[key];\r\n    } else {\r\n      label += element.data('label');\r\n    }\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Generate a random color for each label\r\n   * @param labels array of labels\r\n   */\r\n  generateRandomColors(labels) {\r\n    this.colorMap = {};\r\n    labels.forEach((label) => {\r\n      let r = 0;\r\n      let g = 0;\r\n      let b = 0;\r\n      while (r + g + b < 382) {\r\n        r = Math.floor((Math.random() * 255));\r\n        g = Math.floor((Math.random() * 255));\r\n        b = Math.floor((Math.random() * 255));\r\n      }\r\n      this.colorMap[label] = [r, g, b];\r\n    });\r\n  }\r\n\r\n  public async onExecute() {\r\n\r\n    let graph: Graph = await this.restService.difference(this.dbName, this.fromTimeStamp, this.toTimeStamp, this.timeDim === \"valid\" ? TimeDimension.VALIDTIME : TimeDimension.TRANSACTIONTIME);\r\n    this.cy.elements().remove();\r\n    // set conaining all distinct labels (property key specified by vertexLabelKey)\r\n    let labels = new Set();\r\n\r\n    // compute maximum count of all vertices, used for scaling the vertex sizes\r\n    for (let i = 0; i < graph.nodes.length; i++) {\r\n      let node = graph.nodes[i];\r\n      labels.add(node.data.label);\r\n    }\r\n    for (let i = 0; i < graph.edges.length; i++) {\r\n      let edge = graph.edges[i];\r\n      labels.add(edge.data.label);\r\n    }\r\n\r\n    // generate random colors for the vertex labels\r\n    this.generateRandomColors(labels);\r\n\r\n    let latNyc = 40.730610;\r\n    let longNyc = -73.935242;\r\n    let elementDefinitions: cytoscape.ElementDefinition[] = graph.nodes.map((node: Node) => {\r\n      let elementDef: cytoscape.ElementDefinition = node;\r\n      let lat:number=0;\r\n      let long:number=0;\r\n      node.data.properties.forEach((property) => {\r\n        if (property.key === \"lat\") {\r\n          lat= parseFloat(property.value)-latNyc;\r\n        } else if (property.key === \"long\") {\r\n          long= parseFloat(property.value)-longNyc;\r\n        }\r\n      });\r\n      elementDef.position = {x:lat*50000,y:long*50000};\r\n      return elementDef;\r\n    });\r\n    this.cy.add(elementDefinitions);\r\n\r\n    this.cy.add(graph.edges);\r\n    let forceLayout = {\r\n      name: 'cose',\r\n\r\n      // called on `layoutready`\r\n      ready: function () {\r\n      },\r\n\r\n      // called on `layoutstop`\r\n      stop: function () {\r\n      },\r\n\r\n      // whether to animate while running the layout\r\n      animate: false,\r\n\r\n      // number of iterations between consecutive screen positions update (0 ->\r\n      // only updated on the end)\r\n      refresh: 4,\r\n\r\n      // whether to fit the network view after when done\r\n      fit: true,\r\n\r\n      // padding on fit\r\n      padding: 30,\r\n\r\n      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\r\n      boundingBox: undefined,\r\n\r\n      // whether to randomize node positions on the beginning\r\n      randomize: true,\r\n\r\n      // whether to use the JS console to print debug messages\r\n      debug: false,\r\n\r\n      // node repulsion (non overlapping) multiplier\r\n      nodeRepulsion: 8000000,\r\n\r\n      // node repulsion (overlapping) multiplier\r\n      nodeOverlap: 10,\r\n\r\n      // ideal edge (non nested) length\r\n      idealEdgeLength: 1,\r\n\r\n      // divisor to compute edge forces\r\n      edgeElasticity: 100,\r\n\r\n      // nesting factor (multiplier) to compute ideal edge length for nested edges\r\n      nestingFactor: 5,\r\n\r\n      // gravity force (constant)\r\n      gravity: 250,\r\n\r\n      // maximum number of iterations to perform\r\n      numIter: 100,\r\n\r\n      // initial temperature (maximum node displacement)\r\n      initialTemp: 200,\r\n\r\n      // cooling factor (how the temperature is reduced between consecutive iterations\r\n      coolingFactor: 0.95,\r\n\r\n      // lower temperature threshold (below this point the layout will end)\r\n      minTemp: 1.0,\r\n    };\r\n\r\n\r\n    //let lay: cytoscape.Layouts = this.cy.layout(forceLayout);\r\n    //lay.run();\r\n  }\r\n  public onFromChanged(timeStamp: TimeStamp) {\r\n    this.fromTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onToChanged(timeStamp: TimeStamp) {\r\n    this.toTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    console.log(dbName);\r\n  }\r\n\r\n}\r\n","<div class=\"content2\" fxLayout=\"column\" fxFlexFill>\r\n\r\n    <div fxFlex=\"350px\" class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp (timeStamp)=\"onFromChanged($event)\" label=\"From\" style=\"display:block;\">\r\n        </app-time-stamp>\r\n        <app-time-stamp (timeStamp)=\"onToChanged($event)\" label=\"To\" style=\"display:block;\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button (click)=\"onExecute()\">Execute</button>\r\n    <div fxFlex=\"500px\" id=\"differenceCanvas\" class=\"canvas\"></div>\r\n\r\n\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'enumKeysPipe'\n})\nexport class EnumKeysPipe implements PipeTransform {\n\n  transform(data: Object): Array<String> {\n    return Object.keys(data);\n  }\n\n}\n","<div class=\"content\" fxFlexFill fxLayout=\"column\">\r\n\r\n    <div ngFlex=\"500px\" class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\"></app-select-graph>\r\n        <br>\r\n        <h3>Grouping Keys</h3>\r\n        <button mat-stroked-button (click)=\"addGroupingKey()\">+</button>\r\n        <button mat-stroked-button (click)=\"removeGroupingKey()\" *ngIf=\"groupingKeys.length>0\">-</button>\r\n\r\n        <mat-card *ngFor=\"let groupingKey of groupingKeys;let index=index;trackBy:trackByIndex;\">\r\n            <mat-card-content>\r\n                <!--Grouping Type, always visible-->\r\n                <mat-form-field matLine>\r\n                    <mat-label>Grouping Type</mat-label>\r\n                    <mat-select [(ngModel)]=\"groupingKeys[index].groupingType\">\r\n                        <mat-option *ngFor=\"let groupingType of groupingTypeEnum | enumKeysPipe\" [value]=\"groupingType\">\r\n                            {{groupingType}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <!--Decision if Grouping Key is for Vertices or Edges-->\r\n                <mat-button-toggle-group [(ngModel)]=\"groupingKeys[index].forVertex\" aria-label=\"Font Style\">\r\n                    <mat-button-toggle [value]=true>Vertices</mat-button-toggle>\r\n                    <mat-button-toggle [value]=false>Edges</mat-button-toggle>\r\n                </mat-button-toggle-group>\r\n                <!--LabelSpecific, always visible-->\r\n                <mat-slide-toggle [(ngModel)]=\"groupingKeys[index].labelSpecific\">LabelSpecific\r\n                </mat-slide-toggle>\r\n                <!--Label, required when labelSpecific GroupingKey is being selected-->\r\n                <mat-form-field matLine *ngIf=\"groupingKeys[index].labelSpecific\">\r\n                    <mat-label>Label</mat-label>\r\n                    <mat-select [(ngModel)]=\"groupingKeys[index].label\">\r\n                        <mat-option *ngFor=\"let label of labels\" [value]=\"label\">\r\n                            {{label}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <!--Property, required when Property Grouping is selected-->\r\n                <mat-form-field matLine\r\n                    *ngIf=\"groupingKeys[index].groupingType===groupingTypeEnum.PROPERTY && groupingKeys[index].label\">\r\n                    <mat-label>Property</mat-label>\r\n                    <mat-select [(ngModel)]=\"groupingKeys[index].property\">\r\n                        <mat-option *ngFor=\"let key of selectedLabelProperties(groupingKeys[index].label)\"\r\n                            [value]=\"key.name\">\r\n                            {{key.name}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <!--TimeDimension, required on all temporal Grouping Keys-->\r\n                <mat-button-toggle-group *ngIf=\"isGroupingTimeDimRequired(groupingKeys[index].groupingType)\"\r\n                    [(ngModel)]=\"groupingKeys[index].timeDim\">\r\n                    <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\r\n                    <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\r\n                </mat-button-toggle-group>\r\n                <!--ChronoField, required on TimeStampField GroupingKey-->\r\n                <mat-form-field matLine *ngIf=\"groupingKeys[index].groupingType===groupingTypeEnum.TIMESTAMPFIELD\">\r\n                    <mat-label>ChronoField</mat-label>\r\n                    <mat-select [(ngModel)]=\"groupingKeys[index].chronoField\">\r\n                        <mat-option *ngFor=\"let chronoField of chronoFieldEnum | enumKeysPipe\" [value]=\"chronoField\">\r\n                            {{chronoField}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <!--ChronoUnit, required on duration temporal Grouping Key-->\r\n                <mat-form-field matLine *ngIf=\"groupingKeys[index].groupingType===groupingTypeEnum.DURATION\">\r\n                    <mat-label>ChronoUnit</mat-label>\r\n                    <mat-select [(ngModel)]=\"groupingKeys[index].chronoUnit\">\r\n                        <mat-option *ngFor=\"let chronoUnit of chronoUnitEnum | enumKeysPipe\" [value]=\"chronoUnit\">\r\n                            {{chronoUnit}}\r\n                        </mat-option>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n                <!--TimeField, required on TimeStamp and TimeStampField Grouping Key-->\r\n                <mat-button-toggle-group *ngIf=\"isGroupingTimeFieldRequired(groupingKeys[index].groupingType)\"\r\n                    [(ngModel)]=\"groupingKeys[index].timeField\">\r\n                    <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\r\n                    <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\r\n                </mat-button-toggle-group>\r\n\r\n            </mat-card-content>\r\n        </mat-card>\r\n        <br>\r\n        <h3>Aggregation Functions</h3>\r\n        <button mat-stroked-button (click)=\"addAggregationFunction()\">+</button>\r\n        <button mat-stroked-button (click)=\"removeAggregationFunction()\"\r\n            *ngIf=\"aggregationFunctions.length>0\">-</button>\r\n        <mat-card\r\n            *ngFor=\"let aggregationFunction of aggregationFunctions;let index=index;trackBy:trackByIndexAggregate;\">\r\n            <!--Aggregation Function, always required-->\r\n            <mat-form-field matLine>\r\n                <mat-label>AggregationType</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].aggregationType\">\r\n                    <mat-option *ngFor=\"let aggrFun of aggregationFunctionEnum | enumKeysPipe\" [value]=\"aggrFun\">\r\n                        {{aggrFun}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--for Vertex or Edge, always required-->\r\n            <mat-button-toggle-group [(ngModel)]=\"aggregationFunctions[index].forEdges\" aria-label=\"Font Style\">\r\n                <mat-button-toggle [value]=false>Vertices</mat-button-toggle>\r\n                <mat-button-toggle [value]=true>Edges</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!-- Property for regular aggregation Functions -->\r\n            <mat-form-field matLine *ngIf=\"isAggrPropertyFieldRequired(aggregationFunctions[index].aggregationType)\">\r\n                <mat-label>Property</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].property\">\r\n                    <mat-option *ngFor=\"let prop of propertiesWithNumericalValues()\" [value]=\"prop\">\r\n                        {{prop}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--Time Dimension for temporal Aggregations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeDimRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeDim\">\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!--TimeField Required for temporal operations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeFieldRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeField\">\r\n                <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n        </mat-card>\r\n        <button mat-button (click)=\"onExecute()\">Execute</button>\r\n    </div>\r\n    <div fxFlexFill id=\"groupingCanvas\" class=\"canvas\"></div>\r\n\r\n</div>","import { Component, AfterViewInit } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport * as cytoscape from 'cytoscape';\r\nimport { TimeDimension, ChronoUnit, TimeField, ChronoField, AggregationType, GroupingKey, GroupingType, KeysAndLabels, AggregationKey, KeysAndLabelsVertexKeys, KeysAndLabelsEdgeKeys, Graph } from 'src/gen/generatedAngular';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-grouping',\r\n  templateUrl: './grouping.component.html',\r\n  styleUrls: ['./grouping.component.scss']\r\n})\r\nexport class GroupingComponent implements AfterViewInit {\r\n\r\n  //Currently entered DB Name\r\n  public dbName: string;\r\n\r\n  //Grouping Keys\r\n  public groupingKeys: GroupingKey[] = [];\r\n\r\n  //Aggregation Functions\r\n  public aggregationFunctions: AggregationKey[] = [];\r\n\r\n  public timeStamp = null;\r\n\r\n  private cy: cytoscape.Core;\r\n\r\n  public chronoFieldEnum = ChronoField;\r\n  public chronoUnitEnum = ChronoUnit;\r\n  public aggregationFunctionEnum = AggregationType;\r\n  public timeFieldEnum = TimeField;\r\n  public timeDimensionEnum = TimeDimension;\r\n  public groupingTypeEnum = GroupingType;\r\n\r\n  public keysAndLabels: KeysAndLabels;\r\n\r\n  public labels: string[] = [];\r\n\r\n  public colorMap = {};\r\n\r\n\r\n   /**\r\n   * Buffers the last graph response from the server to improve redrawing speed.\r\n   */\r\n  public bufferedData;\r\n\r\n  /**\r\n   * True, if the graph layout should be force based\r\n   * @type {boolean}\r\n   */\r\n  public useForceLayout = true;\r\n\r\n  /**\r\n   * True, if the default label should be used\r\n   * @type {boolean}\r\n   */\r\n  public useDefaultLabel = true;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of vertices\r\n   * @type {number}\r\n   */\r\n  public maxVertexCount = 0;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of edges\r\n   * @type {number}\r\n   */\r\n  public maxEdgeCount = 0;\r\n\r\n\r\n  constructor(public restService: RestService) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.cy = cytoscape(<any>{\r\n      container: document.getElementById('groupingCanvas'),\r\n      style: (<any>cytoscape).stylesheet()\r\n        .selector('node')\r\n        .css({\r\n          // define label content and font\r\n          'content': (node) => {\r\n            return node.data().label;\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '10px',\r\n          'text-valign': 'center',\r\n          'color': 'black',\r\n          'background-color': (node) => {\r\n            let label = node.data().label;\r\n            let color = this.colorMap[label];\r\n            let result = '#';\r\n            result += ('0' + color[0].toString(16)).substr(-2);\r\n            result += ('0' + color[1].toString(16)).substr(-2);\r\n            result += ('0' + color[2].toString(16)).substr(-2);\r\n            return result;\r\n          },\r\n          'width': '60px',\r\n          'height': '60px',\r\n          'text-wrap': 'wrap'\r\n        })\r\n        .selector('edge')\r\n        .css({\r\n          'curve-style': 'haystack',\r\n          // layout of edge and edge label\r\n          'content': (edge) => {\r\n            //No writing on edges\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '10',\r\n          'line-color': '#999',\r\n          // width of edges can be determined by property count\r\n          // count specifies that the edge represents 1 or more other edges\r\n          'width': 2,\r\n          'target-arrow-shape': 'triangle',\r\n          'target-arrow-color': '#000'\r\n        })\r\n        // properties of edges and vertices in special states, e.g. invisible or faded\r\n        .selector('.faded')\r\n        .css({\r\n          'opacity': 0.25,\r\n          'text-opacity': 0\r\n        })\r\n        .selector('.invisible')\r\n        .css({\r\n          'opacity': 0,\r\n          'text-opacity': 0\r\n        }),\r\n      ready: () => {\r\n        if (this.cy) {\r\n          this.cy.elements().unselectify();\r\n          /* if a vertex is selected, fade all edges and vertices\r\n          that are not in direct neighborhood of the vertex */\r\n          this.cy.on('tap', 'node', (e: any) => {\r\n            let node = e.cyTarget;\r\n            let neighborhood = node.neighborhood().add(node);\r\n\r\n            this.cy.elements().addClass('faded');\r\n            neighborhood.removeClass('faded');\r\n          });\r\n          // remove fading by clicking somewhere else\r\n          this.cy.on('tap', (e: any) => {\r\n\r\n            if (e.cyTarget === this.cy) {\r\n              this.cy.elements().removeClass('faded');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n    console.log(this.cy);\r\n    \r\n  }\r\n\r\n  addGroupingKey() {\r\n    this.groupingKeys.push({ groupingType: GroupingType.NOTHING, labelSpecific: false, forVertex: true });\r\n  }\r\n  removeGroupingKey() {\r\n    this.groupingKeys.pop();\r\n  }\r\n\r\n  addAggregationFunction() {\r\n    this.aggregationFunctions.push({});\r\n  }\r\n  removeAggregationFunction() {\r\n    this.aggregationFunctions.pop();\r\n  }\r\n\r\n\r\n  /**\r\n   * User presses Execute Button\r\n   * Triggers Backend calls.\r\n   */\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.grouping(this.dbName, this.groupingKeys, this.aggregationFunctions);\r\n    console.log(graph);\r\n    this.cy.elements().remove();\r\n    // set conaining all distinct labels (property key specified by vertexLabelKey)\r\n    let labels = new Set();\r\n\r\n    // compute maximum count of all vertices, used for scaling the vertex sizes\r\n    for (let i = 0; i < graph.nodes.length; i++) {\r\n      let node = graph.nodes[i];\r\n      labels.add(node.data.label);\r\n    }\r\n    for (let i = 0; i < graph.edges.length; i++) {\r\n      let edge = graph.edges[i];\r\n      labels.add(edge.data.label);\r\n    }\r\n    // generate random colors for the vertex labels\r\n    this.generateRandomColors(labels);\r\n\r\n    this.cy.add(graph.nodes);\r\n    this.cy.add(graph.edges);\r\n    let forceLayout = {\r\n      name: 'cose',\r\n\r\n      // called on `layoutready`\r\n      ready: function () {\r\n      },\r\n\r\n      // called on `layoutstop`\r\n      stop: function () {\r\n      },\r\n\r\n      // whether to animate while running the layout\r\n      animate: false,\r\n\r\n      // number of iterations between consecutive screen positions update (0 ->\r\n      // only updated on the end)\r\n      refresh: 4,\r\n\r\n      // whether to fit the network view after when done\r\n      fit: true,\r\n\r\n      // padding on fit\r\n      padding: 30,\r\n\r\n      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\r\n      boundingBox: undefined,\r\n\r\n      // whether to randomize node positions on the beginning\r\n      randomize: true,\r\n\r\n      // whether to use the JS console to print debug messages\r\n      debug: false,\r\n\r\n      // node repulsion (non overlapping) multiplier\r\n      nodeRepulsion: 8000000,\r\n\r\n      // node repulsion (overlapping) multiplier\r\n      nodeOverlap: 10,\r\n\r\n      // ideal edge (non nested) length\r\n      idealEdgeLength: 1,\r\n\r\n      // divisor to compute edge forces\r\n      edgeElasticity: 100,\r\n\r\n      // nesting factor (multiplier) to compute ideal edge length for nested edges\r\n      nestingFactor: 5,\r\n\r\n      // gravity force (constant)\r\n      gravity: 250,\r\n\r\n      // maximum number of iterations to perform\r\n      numIter: 100,\r\n\r\n      // initial temperature (maximum node displacement)\r\n      initialTemp: 200,\r\n\r\n      // cooling factor (how the temperature is reduced between consecutive iterations\r\n      coolingFactor: 0.95,\r\n\r\n      // lower temperature threshold (below this point the layout will end)\r\n      minTemp: 1.0,\r\n    };\r\n\r\n    let lay:cytoscape.Layouts = this.cy.layout(forceLayout);\r\n    lay.run();\r\n  }\r\n\r\n  /**\r\n* Generate a random color for each label\r\n* @param labels array of labels\r\n*/\r\n  public generateRandomColors(labels) {\r\n    this.colorMap = {};\r\n    labels.forEach((label) => {\r\n      let r = 0;\r\n      let g = 0;\r\n      let b = 0;\r\n      while (r + g + b < 382) {\r\n        r = Math.floor((Math.random() * 255));\r\n        g = Math.floor((Math.random() * 255));\r\n        b = Math.floor((Math.random() * 255));\r\n      }\r\n      this.colorMap[label] = [r, g, b];\r\n    });\r\n  }\r\n  /**\r\n   * Change model when the user changes the db name in the according component\r\n   * \r\n   * @param dbName \r\n   */\r\n  public async onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.keysAndLabels = await this.restService.getKeysAndLabels(dbName);\r\n    this.setKeysAndLabels();\r\n    console.log(dbName);\r\n  }\r\n  public setKeysAndLabels() {\r\n    this.labels = this.keysAndLabels.edgeLabels.concat(this.keysAndLabels.vertexLabels);\r\n  }\r\n  public selectedLabelProperties(label: string) {\r\n    return this.filterKeysForLabel(label);\r\n  }\r\n  public trackByIndex(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n  public trackByIndexAggregate(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n  private filterKeysForLabel(searchedLabel: string) {\r\n    if (!searchedLabel) {\r\n      return [];\r\n    }\r\n    //Check which Properties are used with the given node label\r\n    let applicableVertexKeys: KeysAndLabelsVertexKeys[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\r\n      let correctLabel = vertexKey.labels.filter((label) => {\r\n        return searchedLabel === label;\r\n      });\r\n      return correctLabel.length > 0;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys: KeysAndLabelsEdgeKeys[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\r\n      let correctLabel = edgeKey.labels.filter((label) => {\r\n        return searchedLabel === label;\r\n      });\r\n      return correctLabel.length > 0;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }\r\n\r\n  public propertiesWithNumericalValues(): string[] {\r\n    let applicableVertexKeys: string[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\r\n      return vertexKey.numerical;\r\n    }).map((vertexKey) => {\r\n      return vertexKey.name;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys: string[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\r\n      return edgeKey.numerical;\r\n    }).map((edgeKey) => {\r\n      return edgeKey.name;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }\r\n\r\n  public isAggrTimeDimRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MAXTIME:\r\n      case AggregationType.MINDURATION:\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.AVERAGEDURATION:\r\n      case AggregationType.MAXDURATION:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrTimeFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.MAXTIME:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrPropertyFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MIN:\r\n      case AggregationType.MAX:\r\n      case AggregationType.SUM:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isGroupingTimeDimRequired(groupingType: GroupingType): boolean {\r\n    switch (groupingType) {\r\n      case GroupingType.DURATION:\r\n      case GroupingType.TIMEINTERVAL:\r\n      case GroupingType.TIMESTAMP:\r\n      case GroupingType.TIMESTAMPFIELD:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isGroupingTimeFieldRequired(groupingType: GroupingType): boolean {\r\n    switch (groupingType) {\r\n      case GroupingType.TIMESTAMP:\r\n      case GroupingType.TIMESTAMPFIELD:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-tab-group dynamicHeight>\r\n    <mat-tab label=\"Snapshot\"><ng-template matTabContent><app-snapshot></app-snapshot></ng-template> </mat-tab>\r\n    <mat-tab label=\"Difference\"> <ng-template matTabContent><app-difference></app-difference></ng-template> </mat-tab>\r\n    <mat-tab label=\"Grouping\"> <ng-template matTabContent><app-grouping></app-grouping> </ng-template> </mat-tab>\r\n  </mat-tab-group>\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { SnapshotRequest, TimeDimension, TemporalPredicate, DefaultService, TimeStamp, DifferenceRequest, Graph, GroupingRequest,GroupingKey, AggregationKey, KeysAndLabels, KeysAndLabelsVertexKeys } from 'src/gen/generatedAngular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestService {\r\n\r\n  constructor(public defaultService:DefaultService) {\r\n  }\r\n\r\n  public snapshot(dbName:string,timeStamp:TimeStamp,timeDimension:TimeDimension):Promise<Graph> {    \r\n    let snapshotJson: SnapshotRequest = {\r\n      timeDim: timeDimension,\r\n      timeStamp:\r\n      {\r\n        predicate: timeStamp.predicate,\r\n        startDate: timeStamp.startDate,\r\n        endDate: timeStamp.endDate ?timeStamp.endDate: null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    let result = this.defaultService.snapshot(snapshotJson);\r\n    return result.toPromise();\r\n  }\r\n\r\n  public difference(dbName:string,from:TimeStamp,to:TimeStamp,timeDimension:TimeDimension) {\r\n\r\n    let differenceJson: DifferenceRequest = {\r\n      timeDim: timeDimension,\r\n      from:\r\n      {\r\n        predicate: from.predicate,\r\n        startDate: from.startDate,\r\n        endDate: from.endDate ? from.endDate : null\r\n      },\r\n      to:\r\n      {\r\n        predicate: to.predicate,\r\n        startDate: to.startDate,\r\n        endDate: to.endDate ? to.endDate : null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    return this.defaultService.difference(differenceJson).toPromise();\r\n  }\r\n\r\n  public grouping(dbName:string,groupingKeys:Array<GroupingKey>,aggregationFunctions:Array<AggregationKey>){\r\n    let vertexKeys = groupingKeys.filter((key)=>{\r\n      return key.forVertex;\r\n    });\r\n    let edgeKeys = groupingKeys.filter((key)=>{\r\n      return !key.forVertex;\r\n    });\r\n    let vertexAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let edgeAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let groupingJson: GroupingRequest = {\r\n      dbName:  dbName,\r\n      vertexKeys: vertexKeys,\r\n      edgeKeys: edgeKeys,\r\n      vertexAggrFuncs: vertexAggrFuncs,\r\n      edgeAggrFuncs: edgeAggrFuncs\r\n    }\r\n    return this.defaultService.grouping(groupingJson).toPromise();\r\n  }\r\n/**\r\n  public async getPropertiesForLabel(dbName:string,label:string):Promise<Array<string>>{\r\n    let keys:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return this.filterKeysForLabel(keys,label).map((key)=>{\r\n      return key.name;\r\n    });\r\n  }\r\n\r\n  private filterKeysForLabel(keys:KeysAndLabels,searchedLabel:string){\r\n    //Check which Properties are used with the given node label\r\n    let applicableVertexKeys:KeysAndLabelsVertexKeys[] = keys.vertexKeys.filter((vertexKey)=>{\r\n      let correctLabel = vertexKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys:KeysAndLabelsVertexKeys[] = keys.edgeKeys.filter((edgeKey)=>{\r\n      let correctLabel = edgeKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }**/\r\n\r\n\r\n  public async getKeysAndLabels(dbName:string):Promise<KeysAndLabels>{\r\n    let keysAndLabels:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return keysAndLabels;\r\n  }\r\n\r\n\r\n  public getGraphs():Promise<Array<string>>{\r\n    return this.defaultService.getGraphs().toPromise();\r\n  }\r\n  public getGraph(dbName:string):Promise<Graph>{\r\n    return this.defaultService.getGraph(dbName).toPromise();    \r\n  }\r\n\r\n}\r\n\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { RestService } from '../rest.service';\n\n@Component({\n  selector: 'app-select-graph',\n  templateUrl: './select-graph.component.html',\n  styleUrls: ['./select-graph.component.scss']\n})\nexport class SelectGraphComponent implements OnInit {\n\n  @Output(\"dbName\") dbEvent = new EventEmitter<string>();\n\n  public graphs: string[]=[];\n  public selectedGraph:string;\n  constructor(public restService:RestService) {\n    restService.getGraphs().then((availableGraphs)=>{\n      this.graphs=availableGraphs;\n    });    \n   }\n\n  ngOnInit(): void {\n  }\n  public publishChanges(){\n    this.dbEvent.emit(this.selectedGraph);\n  }\n}\n","<mat-form-field matLine>\n    <mat-label >Select Graph</mat-label>\n    <mat-select [(ngModel)]=\"selectedGraph\" (selectionChange)=\"publishChanges()\">\n      <mat-option *ngFor=\"let graph of graphs\" [value]=\"graph\">\n        {{graph}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n","import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport { TimeStamp, Graph, TimeDimension, Node } from 'src/gen/generatedAngular';\r\nimport * as cytoscape from 'cytoscape';\r\n\r\n@Component({\r\n  selector: 'app-snapshot',\r\n  templateUrl: './snapshot.component.html',\r\n  styleUrls: ['./snapshot.component.scss']\r\n})\r\nexport class SnapshotComponent implements AfterViewInit {\r\n\r\n  public timeStamp = null;\r\n  public dbName: string;\r\n  public timeDim=\"valid\";\r\n  private cy: cytoscape.Core;\r\n\r\n  public aggrPrefixes = ['min ', 'max ', 'sum '];\r\n\r\n  /**\r\n   * Map of all possible values for the vertexLabelKey to a color in RGB format.\r\n   * @type {{}}\r\n   */\r\n  public colorMap = {};\r\n\r\n  /**\r\n   * Buffers the last graph response from the server to improve redrawing speed.\r\n   */\r\n  public bufferedData;\r\n\r\n  /**\r\n   * True, if the graph layout should be force based\r\n   * @type {boolean}\r\n   */\r\n  public useForceLayout = true;\r\n\r\n  /**\r\n   * True, if the default label should be used\r\n   * @type {boolean}\r\n   */\r\n  public useDefaultLabel = true;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of vertices\r\n   * @type {number}\r\n   */\r\n  public maxVertexCount = 0;\r\n\r\n  /**\r\n   * Maximum value for the count attribute of edges\r\n   * @type {number}\r\n   */\r\n  public maxEdgeCount = 0;\r\n\r\n  constructor(public restService: RestService) {\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n    this.cy = cytoscape(<any>{\r\n      container: document.getElementById('snapshotCanvas'),\r\n      style: (<any>cytoscape).stylesheet()\r\n        .selector('node')\r\n        .css({\r\n          // define label content and font\r\n          'content': (node) => {\r\n            return node.data().label;\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '10px',\r\n          'text-valign': 'center',\r\n          'color': 'black',\r\n          'background-color': (node) => {\r\n            let label = node.data().label;\r\n            let color = this.colorMap[label];\r\n            let result = '#';\r\n            result += ('0' + color[0].toString(16)).substr(-2);\r\n            result += ('0' + color[1].toString(16)).substr(-2);\r\n            result += ('0' + color[2].toString(16)).substr(-2);\r\n            return result;\r\n          },\r\n          'width': '60px',\r\n          'height': '60px',\r\n          'text-wrap': 'wrap'\r\n        })\r\n        .selector('edge')\r\n        .css({\r\n          'curve-style': 'haystack',\r\n          // layout of edge and edge label\r\n          'content': (edge) => {\r\n            //No writing on edges\r\n          },\r\n          // if the count shall effect the vertex size, set font size accordingly\r\n          'font-size': '10',\r\n          'line-color': '#999',\r\n          // width of edges can be determined by property count\r\n          // count specifies that the edge represents 1 or more other edges\r\n          'width': 2,\r\n          'target-arrow-shape': 'triangle',\r\n          'target-arrow-color': '#000'\r\n        })\r\n        // properties of edges and vertices in special states, e.g. invisible or faded\r\n        .selector('.faded')\r\n        .css({\r\n          'opacity': 0.25,\r\n          'text-opacity': 0\r\n        })\r\n        .selector('.invisible')\r\n        .css({\r\n          'opacity': 0,\r\n          'text-opacity': 0\r\n        }),\r\n      ready: () => {\r\n        if (this.cy) {\r\n          this.cy.elements().unselectify();\r\n          /* if a vertex is selected, fade all edges and vertices\r\n          that are not in direct neighborhood of the vertex */\r\n          this.cy.on('tap', 'node', (e: any) => {\r\n            let node = e.cyTarget;\r\n            let neighborhood = node.neighborhood().add(node);\r\n\r\n            this.cy.elements().addClass('faded');\r\n            neighborhood.removeClass('faded');\r\n          });\r\n          // remove fading by clicking somewhere else\r\n          this.cy.on('tap', (e: any) => {\r\n\r\n            if (e.cyTarget === this.cy) {\r\n              this.cy.elements().removeClass('faded');\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n    console.log(this.cy);\r\n  }\r\n  getLabel(element, key, useDefaultLabel) {\r\n    let label = '';\r\n    if (!useDefaultLabel && key !== 'label') {\r\n      label += element.data('properties')[key];\r\n    } else {\r\n      label += element.data('label');\r\n    }\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * Generate a random color for each label\r\n   * @param labels array of labels\r\n   */\r\n  generateRandomColors(labels) {\r\n    this.colorMap = {};\r\n    labels.forEach((label)=> {\r\n      let r = 0;\r\n      let g = 0;\r\n      let b = 0;\r\n      while (r + g + b < 382) {\r\n        r = Math.floor((Math.random() * 255));\r\n        g = Math.floor((Math.random() * 255));\r\n        b = Math.floor((Math.random() * 255));\r\n      }\r\n      this.colorMap[label] = [r, g, b];\r\n    });\r\n  }\r\n\r\n  public async onExecute() {\r\n\r\n    let graph: Graph = await this.restService.snapshot(this.dbName, this.timeStamp,this.timeDim===\"valid\"?TimeDimension.VALIDTIME:TimeDimension.TRANSACTIONTIME);\r\n    this.cy.elements().remove();\r\n    // set conaining all distinct labels (property key specified by vertexLabelKey)\r\n    let labels = new Set();\r\n\r\n    // compute maximum count of all vertices, used for scaling the vertex sizes\r\n    for (let i = 0; i < graph.nodes.length; i++) {\r\n      let node = graph.nodes[i];\r\n      labels.add(node.data.label);\r\n    }\r\n    for (let i = 0; i < graph.edges.length; i++) {\r\n      let edge = graph.edges[i];\r\n      labels.add(edge.data.label);\r\n    }\r\n\r\n    // generate random colors for the vertex labels\r\n    this.generateRandomColors(labels);\r\n\r\n    let latNyc = 40.730610;\r\n    let longNyc = -73.935242;\r\n    let elementDefinitions: cytoscape.ElementDefinition[] = graph.nodes.map((node: Node) => {\r\n      let elementDef: cytoscape.ElementDefinition = node;\r\n      let lat:number=0;\r\n      let long:number=0;\r\n      node.data.properties.forEach((property) => {\r\n        if (property.key === \"lat\") {\r\n          lat= parseFloat(property.value)-latNyc;\r\n        } else if (property.key === \"long\") {\r\n          long= parseFloat(property.value)-longNyc;\r\n        }\r\n      });\r\n      elementDef.position = {x:lat*50000,y:long*50000};\r\n      return elementDef;\r\n    });\r\n    this.cy.add(elementDefinitions);\r\n\r\n    this.cy.add(graph.edges);\r\n    let forceLayout = {\r\n      name: 'cose',\r\n  \r\n      // called on `layoutready`\r\n      ready: function () {\r\n      },\r\n  \r\n      // called on `layoutstop`\r\n      stop: function () {\r\n      },\r\n  \r\n      // whether to animate while running the layout\r\n      animate: false,\r\n  \r\n      // number of iterations between consecutive screen positions update (0 ->\r\n      // only updated on the end)\r\n      refresh: 4,\r\n  \r\n      // whether to fit the network view after when done\r\n      fit: true,\r\n  \r\n      // padding on fit\r\n      padding: 30,\r\n  \r\n      // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\r\n      boundingBox: undefined,\r\n  \r\n      // whether to randomize node positions on the beginning\r\n      randomize: true,\r\n  \r\n      // whether to use the JS console to print debug messages\r\n      debug: false,\r\n  \r\n      // node repulsion (non overlapping) multiplier\r\n      nodeRepulsion: 8000000,\r\n  \r\n      // node repulsion (overlapping) multiplier\r\n      nodeOverlap: 10,\r\n  \r\n      // ideal edge (non nested) length\r\n      idealEdgeLength: 1,\r\n  \r\n      // divisor to compute edge forces\r\n      edgeElasticity: 100,\r\n  \r\n      // nesting factor (multiplier) to compute ideal edge length for nested edges\r\n      nestingFactor: 5,\r\n  \r\n      // gravity force (constant)\r\n      gravity: 250,\r\n  \r\n      // maximum number of iterations to perform\r\n      numIter: 100,\r\n  \r\n      // initial temperature (maximum node displacement)\r\n      initialTemp: 200,\r\n  \r\n      // cooling factor (how the temperature is reduced between consecutive iterations\r\n      coolingFactor: 0.95,\r\n  \r\n      // lower temperature threshold (below this point the layout will end)\r\n      minTemp: 1.0,\r\n  };\r\n\r\n\r\n    //let lay:cytoscape.Layouts = this.cy.layout(forceLayout);\r\n    //lay.run();\r\n  }\r\n  public onTimeStampChanged(timeStamp: TimeStamp) {\r\n    this.timeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    console.log(dbName);\r\n  }\r\n}\r\n","<div class=\"content\" fxLayout=\"column\" fxFlexFill>\r\n\r\n    <div fxFlex=\"350px\" class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp (timeStamp)=\"onTimeStampChanged($event)\" label=\"Timestamp\" style=\"display:block;\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button (click)=\"onExecute()\">Execute</button>\r\n    <div fxFlex=\"500px\" id=\"snapshotCanvas\" class=\"canvas\"></div>\r\n\r\n</div>","import { Component, OnInit, ViewChild, Output, EventEmitter, AfterViewInit, Input } from '@angular/core';\r\nimport { TemporalPredicate, TimeStamp } from 'src/gen/generatedAngular';\r\nimport { NgxMatDatetimePicker } from '@angular-material-components/datetime-picker';\r\nimport { Moment } from 'moment';\r\n\r\n\r\n\r\nexport interface PredicateSelectOpt{\r\n  value:TemporalPredicate,\r\n  endRequired:boolean\r\n}\r\n\r\n@Component({\r\n  selector: 'app-time-stamp',\r\n  templateUrl: './time-stamp.component.html',\r\n  styleUrls: ['./time-stamp.component.scss']\r\n})\r\nexport class TimeStampComponent implements AfterViewInit {\r\n\r\n  @ViewChild('startPicker') startPicker: NgxMatDatetimePicker<Moment>;\r\n  @ViewChild('endPicker') endPicker: NgxMatDatetimePicker<Moment>;\r\n\r\n  @Output(\"timeStamp\") timeStampEvent = new EventEmitter<TimeStamp>();\r\n\r\n  @Input(\"label\") label:string;\r\n\r\n\r\n\r\n\r\n  selectedPredicate:PredicateSelectOpt;\r\n  predicates:PredicateSelectOpt[]=[];\r\n\r\n  constructor() {\r\n    let keys = Object.keys(TemporalPredicate);\r\n    for (const key of keys) {\r\n      if (key==TemporalPredicate.ASOF) {\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:false}); \r\n      }\r\n      else{\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:true});   \r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.startPicker._selectedChanged.subscribe(()=>{\r\n\r\n      this.publishChanges();\r\n    });\r\n\r\n    this.endPicker._selectedChanged.subscribe(()=>{\r\n\r\n      this.publishChanges();\r\n    });\r\n  }\r\n\r\n  publishChanges():void{\r\n    this.timeStampEvent.emit(<TimeStamp>{predicate:this.selectedPredicate.value,startDate:this.startPicker._selected?.toDate(),endDate:this.endPicker._selected?.toDate()});\r\n  }\r\n  \r\n\r\n}\r\n","\r\n<mat-form-field matLine>\r\n  <mat-label>{{label}}</mat-label>\r\n  <mat-select [(ngModel)]=\"selectedPredicate\" (selectionChange)=\"publishChanges()\">\r\n    <mat-option *ngFor=\"let predicate of predicates\" [value]=\"predicate\">\r\n      {{predicate.value}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"startPicker\" placeholder=\"Select a date\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #startPicker>\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"endPicker\" placeholder=\"Select an Enddate\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate?.endRequired\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #endPicker>\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { DifferenceRequest } from '../model/differenceRequest';\nimport { Graph } from '../model/graph';\nimport { GroupingRequest } from '../model/groupingRequest';\nimport { KeysAndLabels } from '../model/keysAndLabels';\nimport { SnapshotRequest } from '../model/snapshotRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = 'http://localhost:2347';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Difference operation\n     * Performs difference operation on a graph\n     * @param differenceRequest Difference request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/difference`,\n            differenceRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return whole graph\n     * Returns the selected Graph in cytoscape format\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraph(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public getGraph(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public getGraph(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public getGraph(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getGraph.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Graph>(`${this.basePath}/graph/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get available Graphs\n     * Get the names of all available graphs on server\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraphs(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;\n    public getGraphs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;\n    public getGraphs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;\n    public getGraphs(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<string>>(`${this.basePath}/graph`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get/Compute Keys and Labels of this database\n     * Labels and Keys for further processing\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getKeys(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<KeysAndLabels>;\n    public getKeys(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getKeys.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<KeysAndLabels>(`${this.basePath}/keys/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * grouping operation\n     * Performs Snapshot operation on a graph\n     * @param groupingRequest Grouping Request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/grouping`,\n            groupingRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Snapshot operation\n     * Performs Snapshot operation on a graph\n     * @param snapshotRequest Snapshot request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/snapshot`,\n            snapshotRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type AggregationType = 'AVERAGEDURATION' | 'MAXDURATION' | 'MAXTIME' | 'MINDURATION' | 'MINTIME' | 'COUNT' | 'MAX' | 'MIN' | 'SUM' | 'NONE';\n\nexport const AggregationType = {\n    AVERAGEDURATION: 'AVERAGEDURATION' as AggregationType,\n    MAXDURATION: 'MAXDURATION' as AggregationType,\n    MAXTIME: 'MAXTIME' as AggregationType,\n    MINDURATION: 'MINDURATION' as AggregationType,\n    MINTIME: 'MINTIME' as AggregationType,\n    COUNT: 'COUNT' as AggregationType,\n    MAX: 'MAX' as AggregationType,\n    MIN: 'MIN' as AggregationType,\n    SUM: 'SUM' as AggregationType,\n    NONE: 'NONE' as AggregationType\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoField = 'NANOOFSECOND' | 'NANOOFDAY' | 'MICROOFSECOND' | 'MICROOFDAY' | 'MILLIOFSECOND' | 'MILLIOFDAY' | 'SECONDOFMINUTE' | 'SECONDOFDAY' | 'MINUTEOFHOUR' | 'MINUTEOFDAY' | 'HOUROFAMPM' | 'HOUROFDAY' | 'CLOCKHOUROFDAY' | 'AMPMOFDAY' | 'DAYOFWEEK' | 'ALIGNEDDAYOFWEEKINMONTH' | 'ALIGNEDDAYOFWEEKINYEAR' | 'DAYOFMONTH' | 'DAYOFYEAR' | 'EPOCHDAY' | 'ALIGNEDWEEKOFMONTH' | 'ALIGNEDWEEKOFYEAR' | 'MONTHOFYEAR' | 'PROLEPTICMONTH' | 'YEAROFERA' | 'YEAR' | 'ERA' | 'INTANTSECONDS' | 'OFFSETSECONDS';\n\nexport const ChronoField = {\n    NANOOFSECOND: 'NANOOFSECOND' as ChronoField,\n    NANOOFDAY: 'NANOOFDAY' as ChronoField,\n    MICROOFSECOND: 'MICROOFSECOND' as ChronoField,\n    MICROOFDAY: 'MICROOFDAY' as ChronoField,\n    MILLIOFSECOND: 'MILLIOFSECOND' as ChronoField,\n    MILLIOFDAY: 'MILLIOFDAY' as ChronoField,\n    SECONDOFMINUTE: 'SECONDOFMINUTE' as ChronoField,\n    SECONDOFDAY: 'SECONDOFDAY' as ChronoField,\n    MINUTEOFHOUR: 'MINUTEOFHOUR' as ChronoField,\n    MINUTEOFDAY: 'MINUTEOFDAY' as ChronoField,\n    HOUROFAMPM: 'HOUROFAMPM' as ChronoField,\n    HOUROFDAY: 'HOUROFDAY' as ChronoField,\n    CLOCKHOUROFDAY: 'CLOCKHOUROFDAY' as ChronoField,\n    AMPMOFDAY: 'AMPMOFDAY' as ChronoField,\n    DAYOFWEEK: 'DAYOFWEEK' as ChronoField,\n    ALIGNEDDAYOFWEEKINMONTH: 'ALIGNEDDAYOFWEEKINMONTH' as ChronoField,\n    ALIGNEDDAYOFWEEKINYEAR: 'ALIGNEDDAYOFWEEKINYEAR' as ChronoField,\n    DAYOFMONTH: 'DAYOFMONTH' as ChronoField,\n    DAYOFYEAR: 'DAYOFYEAR' as ChronoField,\n    EPOCHDAY: 'EPOCHDAY' as ChronoField,\n    ALIGNEDWEEKOFMONTH: 'ALIGNEDWEEKOFMONTH' as ChronoField,\n    ALIGNEDWEEKOFYEAR: 'ALIGNEDWEEKOFYEAR' as ChronoField,\n    MONTHOFYEAR: 'MONTHOFYEAR' as ChronoField,\n    PROLEPTICMONTH: 'PROLEPTICMONTH' as ChronoField,\n    YEAROFERA: 'YEAROFERA' as ChronoField,\n    YEAR: 'YEAR' as ChronoField,\n    ERA: 'ERA' as ChronoField,\n    INTANTSECONDS: 'INTANTSECONDS' as ChronoField,\n    OFFSETSECONDS: 'OFFSETSECONDS' as ChronoField\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoUnit = 'CENTURIES' | 'DAYS' | 'DECADES' | 'ERAS' | 'FOREVER' | 'HALF_DAYS' | 'HOURS' | 'MICROS' | 'MILLENIA' | 'MILLIS' | 'MINUTES' | 'MONTHS' | 'NANOS' | 'SECONDS' | 'WEEKS' | 'YEARS';\n\nexport const ChronoUnit = {\n    CENTURIES: 'CENTURIES' as ChronoUnit,\n    DAYS: 'DAYS' as ChronoUnit,\n    DECADES: 'DECADES' as ChronoUnit,\n    ERAS: 'ERAS' as ChronoUnit,\n    FOREVER: 'FOREVER' as ChronoUnit,\n    HALFDAYS: 'HALF_DAYS' as ChronoUnit,\n    HOURS: 'HOURS' as ChronoUnit,\n    MICROS: 'MICROS' as ChronoUnit,\n    MILLENIA: 'MILLENIA' as ChronoUnit,\n    MILLIS: 'MILLIS' as ChronoUnit,\n    MINUTES: 'MINUTES' as ChronoUnit,\n    MONTHS: 'MONTHS' as ChronoUnit,\n    NANOS: 'NANOS' as ChronoUnit,\n    SECONDS: 'SECONDS' as ChronoUnit,\n    WEEKS: 'WEEKS' as ChronoUnit,\n    YEARS: 'YEARS' as ChronoUnit\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type GroupingType = 'NOTHING' | 'LABEL' | 'PROPERTY' | 'DURATION' | 'TIMEINTERVAL' | 'TIMESTAMP' | 'TIMESTAMPFIELD';\n\nexport const GroupingType = {\n    NOTHING: 'NOTHING' as GroupingType,\n    LABEL: 'LABEL' as GroupingType,\n    PROPERTY: 'PROPERTY' as GroupingType,\n    DURATION: 'DURATION' as GroupingType,\n    TIMEINTERVAL: 'TIMEINTERVAL' as GroupingType,\n    TIMESTAMP: 'TIMESTAMP' as GroupingType,\n    TIMESTAMPFIELD: 'TIMESTAMPFIELD' as GroupingType\n};\n","export * from './aggregationKey';\nexport * from './aggregationType';\nexport * from './chronoField';\nexport * from './chronoUnit';\nexport * from './differenceRequest';\nexport * from './edge';\nexport * from './edgeData';\nexport * from './edgeDataProperties';\nexport * from './graph';\nexport * from './groupingKey';\nexport * from './groupingRequest';\nexport * from './groupingType';\nexport * from './keysAndLabels';\nexport * from './keysAndLabelsEdgeKeys';\nexport * from './keysAndLabelsVertexKeys';\nexport * from './node';\nexport * from './nodeData';\nexport * from './nodeDataProperties';\nexport * from './snapshotRequest';\nexport * from './temporalPredicate';\nexport * from './timeDimension';\nexport * from './timeField';\nexport * from './timeStamp';\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TemporalPredicate = 'ALL' | 'ASOF' | 'BETWEEN' | 'CONTAINEDIN' | 'CREATEDIN' | 'DELETEDIN' | 'FROMTO' | 'OVERLAPS' | 'PRECEDES' | 'SUCCEEDS' | 'VALIDDURING';\n\nexport const TemporalPredicate = {\n    ALL: 'ALL' as TemporalPredicate,\n    ASOF: 'ASOF' as TemporalPredicate,\n    BETWEEN: 'BETWEEN' as TemporalPredicate,\n    CONTAINEDIN: 'CONTAINEDIN' as TemporalPredicate,\n    CREATEDIN: 'CREATEDIN' as TemporalPredicate,\n    DELETEDIN: 'DELETEDIN' as TemporalPredicate,\n    FROMTO: 'FROMTO' as TemporalPredicate,\n    OVERLAPS: 'OVERLAPS' as TemporalPredicate,\n    PRECEDES: 'PRECEDES' as TemporalPredicate,\n    SUCCEEDS: 'SUCCEEDS' as TemporalPredicate,\n    VALIDDURING: 'VALIDDURING' as TemporalPredicate\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeDimension = 'TRANSACTIONTIME' | 'VALIDTIME';\n\nexport const TimeDimension = {\n    TRANSACTIONTIME: 'TRANSACTIONTIME' as TimeDimension,\n    VALIDTIME: 'VALIDTIME' as TimeDimension\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeField = 'FROM' | 'TO';\n\nexport const TimeField = {\n    FROM: 'FROM' as TimeField,\n    TO: 'TO' as TimeField\n};\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}