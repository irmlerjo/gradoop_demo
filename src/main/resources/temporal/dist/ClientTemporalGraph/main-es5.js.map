{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/aggregation-function/aggregation-function.component.ts","webpack:///src/app/aggregation-function/aggregation-function.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/detail-info/detail-info.component.ts","webpack:///src/app/detail-info/detail-info.component.html","webpack:///src/app/difference/difference.component.html","webpack:///src/app/difference/difference.component.ts","webpack:///src/app/enum-keys-pipe.ts","webpack:///src/app/graph-canvas/graph-canvas.component.ts","webpack:///src/app/graph-canvas/graph-canvas.component.html","webpack:///src/app/grouping-key/grouping-key.component.ts","webpack:///src/app/grouping-key/grouping-key.component.html","webpack:///src/app/grouping/grouping.component.html","webpack:///src/app/grouping/grouping.component.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/rest.service.ts","webpack:///src/app/select-graph/select-graph.component.ts","webpack:///src/app/select-graph/select-graph.component.html","webpack:///src/app/snapshot/snapshot.component.html","webpack:///src/app/snapshot/snapshot.component.ts","webpack:///src/app/time-stamp/time-stamp.component.ts","webpack:///src/app/time-stamp/time-stamp.component.html","webpack:///src/environments/environment.ts","webpack:///src/gen/generatedAngular/api.module.ts","webpack:///src/gen/generatedAngular/api/api.ts","webpack:///src/gen/generatedAngular/api/default.service.ts","webpack:///src/gen/generatedAngular/configuration.ts","webpack:///src/gen/generatedAngular/index.ts","webpack:///src/gen/generatedAngular/model/aggregationType.ts","webpack:///src/gen/generatedAngular/model/chronoField.ts","webpack:///src/gen/generatedAngular/model/chronoUnit.ts","webpack:///src/gen/generatedAngular/model/groupingType.ts","webpack:///src/gen/generatedAngular/model/models.ts","webpack:///src/gen/generatedAngular/model/temporalPredicate.ts","webpack:///src/gen/generatedAngular/model/timeDimension.ts","webpack:///src/gen/generatedAngular/model/timeField.ts","webpack:///src/gen/generatedAngular/variables.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AggregationFunctionComponent","selector","templateUrl","styleUrls","routes","AppRoutingModule","forRoot","imports","AppComponent","title","AppModule","declarations","providers","bootstrap","DetailInfoComponent","dialogRef","data","edgeData","isNodeInfo","nodeData","close","DifferenceComponent","restService","fromTimeStamp","toTimeStamp","dbName","timeDim","timeSpan","drawGraphSubject","difference","VALIDTIME","TRANSACTIONTIME","graph","next","timeStamp","console","log","getValidTimes","onDbNameChanged","onExecute","EnumKeysPipe","Object","name","GraphCanvasComponent","dialog","showDiff","colorMap","useForceLayout","useDefaultLabel","maxVertexCount","maxEdgeCount","coseLayout","ready","stop","animate","refresh","fit","padding","boundingBox","undefined","randomize","debug","nodeRepulsion","nodeOverlap","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","initialTemp","coolingFactor","minTemp","open","drawSubscription","drawGraphEvent","subscribe","draw","unsubscribe","cy","elements","remove","labels","Set","i","nodes","length","node","add","label","edges","edge","generateRandomColors","forceLayout","fallBackToForceLayout","latNyc","longNyc","elementDefinitions","map","elementDef","lat","long","properties","forEach","property","key","parseFloat","value","position","x","y","ungrabify","lay","layout","run","container","canvasReference","nativeElement","style","css","diff","_diff","color","result","toString","substr","unselectify","on","target","neighborhood","addClass","removeClass","openDialog","r","g","b","Math","floor","random","read","GroupingKeyComponent","groupingKeyRemoved","labelSelection","propertySelection","chronoFieldEnum","chronoUnitEnum","timeFieldEnum","timeDimensionEnum","groupingTypeEnum","groupingType","DURATION","TIMEINTERVAL","TIMESTAMP","TIMESTAMPFIELD","searchedLabel","applicableVertexKeys","keysAndLabels","vertexKeys","filter","vertexKey","correctLabel","applicableEdgeKeys","edgeKeys","edgeKey","concat","groupingKey","LABEL","forVertex","labelSpecific","onVertexToggleChange","NOTHING","PROPERTY","vertexLabels","edgeLabels","emit","groupingTypeChanged","removeGroupingKey","GroupingComponent","groupingKeys","aggregationFunctions","aggregationFunctionEnum","push","pop","groupingForm","db","required","chronoUnit","chronoField","grouping","getKeysAndLabels","index","obj","numerical","aggrType","MAXTIME","MINDURATION","MINTIME","AVERAGEDURATION","MAXDURATION","MIN","MAX","SUM","splice","indexOf","addGroupingKey","addAggregationFunction","HomeComponent","RestService","defaultService","timeDimension","snapshotJson","predicate","startDate","endDate","snapshot","toPromise","from","to","differenceJson","vertexAggrFuncs","aggrFunc","forEdges","edgeAggrFuncs","groupingJson","getKeys","getGraphs","getGraph","start","Date","end","providedIn","SelectGraphComponent","dbEvent","graphs","availableGraphs","selectedGraph","publishChanges","SnapshotComponent","TimeStampComponent","timeStampEvent","predicates","ASOF","endRequired","startPicker","_selectedChanged","endPicker","selectedPredicate","_selected","environment","production","ApiModule","parentModule","http","configurationFactory","ngModule","provide","useFactory","APIS","DefaultService","httpClient","basePath","configuration","defaultHeaders","consumes","form","consume","differenceRequest","observe","reportProgress","headers","httpHeaderAccepts","httpHeaderAcceptSelected","selectHeaderAccept","set","httpContentTypeSelected","selectHeaderContentType","post","withCredentials","databaseName","encodeURIComponent","String","get","groupingRequest","snapshotRequest","Configuration","configurationParameters","apiKeys","username","password","accessToken","contentTypes","type","find","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","AggregationType","COUNT","NONE","ChronoField","NANOOFSECOND","NANOOFDAY","MICROOFSECOND","MICROOFDAY","MILLIOFSECOND","MILLIOFDAY","SECONDOFMINUTE","SECONDOFDAY","MINUTEOFHOUR","MINUTEOFDAY","HOUROFAMPM","HOUROFDAY","CLOCKHOUROFDAY","AMPMOFDAY","DAYOFWEEK","ALIGNEDDAYOFWEEKINMONTH","ALIGNEDDAYOFWEEKINYEAR","DAYOFMONTH","DAYOFYEAR","EPOCHDAY","ALIGNEDWEEKOFMONTH","ALIGNEDWEEKOFYEAR","MONTHOFYEAR","PROLEPTICMONTH","YEAROFERA","YEAR","ERA","INTANTSECONDS","OFFSETSECONDS","ChronoUnit","CENTURIES","DAYS","DECADES","ERAS","FOREVER","HALFDAYS","HOURS","MICROS","MILLENIA","MILLIS","MINUTES","MONTHS","NANOS","SECONDS","WEEKS","YEARS","GroupingType","TemporalPredicate","ALL","BETWEEN","CONTAINEDIN","CREATEDIN","DELETEDIN","FROMTO","OVERLAPS","PRECEDES","SUCCEEDS","VALIDDURING","TimeDimension","TimeField","FROM","TO","BASE_PATH","COLLECTION_FORMATS","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-aggregation-function',\n  templateUrl: './aggregation-function.component.html',\n  styleUrls: ['./aggregation-function.component.scss']\n})\nexport class AggregationFunctionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>aggregation-function works!</p>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ClientTemporalGraph';\r\n}\r\n","<app-home></app-home>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule} from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { SelectGraphComponent } from './select-graph/select-graph.component';\r\nimport { SnapshotComponent } from './snapshot/snapshot.component';\r\nimport { DifferenceComponent } from './difference/difference.component';\r\nimport { GroupingComponent } from './grouping/grouping.component'\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { TimeStampComponent } from './time-stamp/time-stamp.component';\r\nimport { NgxMatDatetimePickerModule, NgxMatTimepickerModule, NgxMatNativeDateModule } from '@angular-material-components/datetime-picker';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { DefaultService } from 'src/gen/generatedAngular';\r\nimport { RestService } from './rest.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport { EnumKeysPipe } from './enum-keys-pipe';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport { GroupingKeyComponent } from './grouping-key/grouping-key.component';\r\nimport { AggregationFunctionComponent } from './aggregation-function/aggregation-function.component';\r\nimport { GraphCanvasComponent } from './graph-canvas/graph-canvas.component';\r\nimport {MatIconModule} from '@angular/material/icon';\nimport { DetailInfoComponent } from './detail-info/detail-info.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    SelectGraphComponent,\r\n    SnapshotComponent,\r\n    DifferenceComponent,\r\n    GroupingComponent,\r\n    TimeStampComponent,\r\n    EnumKeysPipe,\r\n    GroupingKeyComponent,\r\n    AggregationFunctionComponent,\r\n    GraphCanvasComponent,\r\n    DetailInfoComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    NgxMatTimepickerModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatNativeDateModule,\r\n    HttpClientModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    FlexLayoutModule,\r\n    MatRadioModule,\r\n    MatCardModule,\r\n    MatSlideToggleModule,\r\n    MatDividerModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [\r\n  DefaultService,\r\n  RestService  \r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { EdgeData, NodeData } from 'src/gen/generatedAngular';\n\n@Component({\n  selector: 'app-detail-info',\n  templateUrl: './detail-info.component.html',\n  styleUrls: ['./detail-info.component.scss']\n})\nexport class DetailInfoComponent implements OnInit {\n\n  public isNodeInfo: boolean;\n  public nodeData: NodeData;\n  public edgeData: EdgeData;\n\n  constructor(public dialogRef: MatDialogRef<DetailInfoComponent>,\n    @Inject(MAT_DIALOG_DATA) public data) {\n    if (data.edgeData) {\n      this.isNodeInfo = false;\n      this.edgeData=data.edgeData;\n    }\n    else if (data.nodeData) {\n      this.isNodeInfo = true;\n      this.nodeData=data.nodeData;\n    }\n    else {\n      this.dialogRef.close();\n    }\n  }\n\n  ngOnInit(): void {\n  }\n  clickClose(){\n    this.dialogRef.close();    \n  }\n\n}\n","<div *ngIf=\"isNodeInfo\">\n    <h1 mat-dialog-title>Label:{{nodeData.label}}</h1>\n    <div mat-dialog-content>\n        <h3>Id:{{nodeData.id}}</h3>\n        <h3>Properties:</h3>\n        <div *ngFor=\"let prop of nodeData.properties\">\n           {{prop.key}} : {{prop.value}}\n        </div>\n    </div>\n    <div mat-dialog-actions>\n        <button mat-button (click)=\"clickClose()\">Close</button>\n    </div>\n</div>\n\n<div *ngIf=\"!isNodeInfo\">\n    <h1 mat-dialog-title>Label:{{edgeData.label}}</h1>\n    <div mat-dialog-content>\n        <h5>Id:{{edgeData.id}}</h5>\n        <h5>Source:{{edgeData.source}}</h5>\n        <h5>Target:{{edgeData.target}}</h5>\n        <h3>Properties:</h3>\n        <div *ngFor=\"let prop of edgeData.properties\">\n            {{prop.key}} : {{prop.value}}\n        </div>\n    </div>\n</div>","<div class=\"content2\" fxLayout=\"column\" fxFill>\r\n\r\n    <div fxFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onFromChanged($event)\" label=\"From\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onToChanged($event)\" label=\"To\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <app-graph-canvas fxFlex [forceLayout]=\"false\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\" [showDiff]=\"true\"></app-graph-canvas>\r\n\r\n\r\n</div>","import { Component } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport { Graph, TimeStamp, TimeDimension } from 'src/gen/generatedAngular';\r\nimport { Subject } from 'rxjs';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n@Component({\r\n  selector: 'app-difference',\r\n  templateUrl: './difference.component.html',\r\n  styleUrls: ['./difference.component.scss']\r\n})\r\nexport class DifferenceComponent {\r\n\r\n\r\n  public fromTimeStamp = null;\r\n  public toTimeStamp = null;\r\n  public dbName: string = null;\r\n  public timeDim = \"valid\";\r\n  public timeSpan: TimeSpan=null;\r\n\r\n\r\n  public drawGraphSubject: Subject<Graph> = new Subject<Graph>();\r\n\r\n\r\n  constructor(public restService: RestService) { }\r\n\r\n\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.difference(this.dbName, this.fromTimeStamp, this.toTimeStamp, this.timeDim === \"valid\" ? TimeDimension.VALIDTIME : TimeDimension.TRANSACTIONTIME);\r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  public onFromChanged(timeStamp: TimeStamp) {\r\n    this.fromTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onToChanged(timeStamp: TimeStamp) {\r\n    this.toTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.timeSpan = this.restService.getValidTimes(dbName);\r\n    console.log(dbName);\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'enumKeysPipe'\n})\nexport class EnumKeysPipe implements PipeTransform {\n\n  transform(data: Object): Array<String> {\n    return Object.keys(data);\n  }\n\n}\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport * as cytoscape from 'cytoscape';\nimport { Graph, Node, EdgeData, NodeData } from 'src/gen/generatedAngular';\nimport { Observable, Subscription } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DetailInfoComponent } from '../detail-info/detail-info.component';\n\n@Component({\n  selector: 'app-graph-canvas',\n  templateUrl: './graph-canvas.component.html',\n  styleUrls: ['./graph-canvas.component.scss']\n})\nexport class GraphCanvasComponent implements OnInit {\n\n\n  @Input('drawGraphEvent')\n  public drawGraphEvent: Observable<Graph>;\n\n  private drawSubscription: Subscription;\n\n  private graph: Graph;\n\n  @Input('forceLayout')\n  public forceLayout: boolean;\n\n  @Input('showDiff')\n  public showDiff: boolean = false;\n\n  @ViewChild(\"canvas\", { read: ElementRef, static: true }) canvasReference: ElementRef;\n\n\n  /**\n * Map of all possible values for the vertexLabelKey to a color in RGB format.\n * @type {{}}\n */\n  public colorMap = {};\n\n  /**\n   * Buffers the last graph response from the server to improve redrawing speed.\n   */\n  public bufferedData;\n\n  /**\n   * True, if the graph layout should be force based\n   * @type {boolean}\n   */\n  public useForceLayout = true;\n\n  /**\n   * True, if the default label should be used\n   * @type {boolean}\n   */\n  public useDefaultLabel = true;\n\n  /**\n   * Maximum value for the count attribute of vertices\n   * @type {number}\n   */\n  public maxVertexCount = 0;\n\n  /**\n   * Maximum value for the count attribute of edges\n   * @type {number}\n   */\n  public maxEdgeCount = 0;\n\n  private cy: cytoscape.Core;\n\n  private coseLayout = {\n    name: 'cose',\n    // called on `layoutready`\n    ready: function () {\n    },\n    // called on `layoutstop`\n    stop: function () {\n    },\n    // whether to animate while running the layout\n    animate: false,\n    // number of iterations between consecutive screen positions update (0 ->\n    // only updated on the end)\n    refresh: 4,\n    // whether to fit the network view after when done\n    fit: true,\n    // padding on fit\n    padding: 30,\n    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    boundingBox: undefined,\n    // whether to randomize node positions on the beginning\n    randomize: true,\n    // whether to use the JS console to print debug messages\n    debug: false,\n    // node repulsion (non overlapping) multiplier\n    nodeRepulsion: 8000000,\n    // node repulsion (overlapping) multiplier\n    nodeOverlap: 10,\n    // ideal edge (non nested) length\n    idealEdgeLength: 1,\n    // divisor to compute edge forces\n    edgeElasticity: 100,\n    // nesting factor (multiplier) to compute ideal edge length for nested edges\n    nestingFactor: 5,\n    // gravity force (constant)\n    gravity: 250,\n    // maximum number of iterations to perform\n    numIter: 100,\n    // initial temperature (maximum node displacement)\n    initialTemp: 200,\n    // cooling factor (how the temperature is reduced between consecutive iterations\n    coolingFactor: 0.95,\n    // lower temperature threshold (below this point the layout will end)\n    minTemp: 1.0,\n  };\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  openDialog(nodeData: NodeData, edgeData: EdgeData) {\n    this.dialog.open(DetailInfoComponent, {\n      data: {\n        nodeData: nodeData,\n        edgeData: edgeData\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.drawSubscription = this.drawGraphEvent.subscribe((graph: Graph) => {\n      this.graph = graph;\n      this.draw();\n    });\n  }\n  ngOnDestroy(): void {\n    this.drawSubscription.unsubscribe();\n  }\n\n\n  draw() {\n    this.cy.elements().remove();\n    // set conaining all distinct labels (property key specified by vertexLabelKey)\n    let labels = new Set();\n\n    // compute maximum count of all vertices, used for scaling the vertex sizes\n    for (let i = 0; i < this.graph.nodes.length; i++) {\n      let node = this.graph.nodes[i];\n      labels.add(node.data.label);\n    }\n    for (let i = 0; i < this.graph.edges.length; i++) {\n      let edge = this.graph.edges[i];\n      labels.add(edge.data.label);\n    }\n\n    // generate random colors for the vertex labels\n    this.generateRandomColors(labels);\n\n\n    if (!this.forceLayout) {\n      let fallBackToForceLayout: boolean = false;\n      let latNyc = 40.730610;\n      let longNyc = -73.935242;\n      let elementDefinitions: cytoscape.ElementDefinition[] = this.graph.nodes.map((node: Node) => {\n        let elementDef: cytoscape.ElementDefinition = node;\n        let lat: number = -200;\n        let long: number = -200;\n        node.data.properties.forEach((property) => {\n          if (property.key === \"lat\") {\n            lat = parseFloat(property.value) - latNyc;\n          } else if (property.key === \"long\") {\n            long = parseFloat(property.value) - longNyc;\n          }\n        });\n        //Fall Back To Force Layout when a node doesnt have any coordinates and the spacial graph can not be rendered properly\n        if (lat === -200 || long === -200) {\n          fallBackToForceLayout = true;\n        }\n        elementDef.position = { x: lat * 60000, y: long * 60000 };\n        return elementDef;\n      });\n      if (!fallBackToForceLayout) {\n        this.cy.add(elementDefinitions);\n        this.cy.nodes().ungrabify();\n        this.cy.add(this.graph.edges);\n      }\n      else {\n        this.forceLayout = true;\n      }\n    }\n    if (this.forceLayout) {\n      this.cy.add(this.graph.nodes);\n      this.cy.add(this.graph.edges);\n      let lay: cytoscape.Layouts = this.cy.layout(this.coseLayout);\n      lay.run();\n    }\n    this.cy.fit();\n  }\n\n  ngAfterViewInit(): void {\n    this.cy = cytoscape(<cytoscape.CytoscapeOptions>{\n      container: this.canvasReference.nativeElement,\n      style: (<any>cytoscape).stylesheet()\n        .selector('node')\n        .css({\n          // define label content and font\n          'content': (node) => {\n            return node.data().label;\n          },\n          // if the count shall effect the vertex size, set font size accordingly\n          'font-size': '10px',\n          'text-valign': 'center',\n          'color': 'black',\n          'background-color': (node) => {\n            if (this.showDiff) {\n              let diff: string = node.data('properties')._diff;\n              if (diff === \"-1\") {\n                return '#D55';\n              }\n              else if (diff === \"1\") {\n                return '#5D5';\n              }\n              else {\n                return '#55D';\n              }\n            }\n            else {\n              let label = node.data().label;\n              let color = this.colorMap[label];\n              let result = '#';\n              result += ('0' + color[0].toString(16)).substr(-2);\n              result += ('0' + color[1].toString(16)).substr(-2);\n              result += ('0' + color[2].toString(16)).substr(-2);\n              return result;\n            }\n          },\n          'width': '60px',\n          'height': '60px',\n          'text-wrap': 'wrap'\n        })\n        .selector('edge')\n        .css({\n          'curve-style': 'bezier',\n          // layout of edge and edge label\n          'content': (edge) => {\n            return edge.data('label');\n            //No writing on edges\n          },\n          // if the count shall effect the vertex size, set font size accordingly\n          'font-size': '10',\n          'line-color': (edge) => {\n            let diff: string = edge.data('properties')._diff;\n            if (diff === \"-1\") {\n              return '#D22';\n            }\n            else if (diff === \"1\") {\n              return '#2D2';\n            }\n            else if (diff === \"0\") {\n              return '#22D';\n            }\n            else {\n              return '#333';\n            }\n          },\n          // width of edges can be determined by property count\n          // count specifies that the edge represents 1 or more other edges\n          'width': 5,\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': '#000'\n        })\n        // properties of edges and vertices in special states, e.g. invisible or faded\n        .selector('.faded')\n        .css({\n          'opacity': 0.25,\n          'text-opacity': 0\n        })\n        .selector('.invisible')\n        .css({\n          'opacity': 0,\n          'text-opacity': 0\n        })\n    });\n\n    this.cy.ready(() => {\n      if (this.cy) {\n        this.cy.elements().unselectify();\n        /* if a vertex is selected, fade all edges and vertices\n        that are not in direct neighborhood of the vertex */\n        this.cy.on('tap', 'node', (e) => {\n          let node = e.target;\n          let neighborhood = node.neighborhood().add(node);\n          console.log(node.data());\n\n          this.cy.elements().addClass('faded');\n          neighborhood.removeClass('faded');\n\n          let nodeData: NodeData = node.data();\n          this.openDialog(nodeData,null);\n        });\n        this.cy.on('tap', 'edge', (e) => {\n          let edge = e.target;\n          let edgeData: EdgeData = edge.data();\n          this.openDialog(null,edgeData);\n\n        });\n        // remove fading by clicking somewhere else\n        this.cy.on('tap', (e) => {\n          if (e.target === this.cy) {\n            this.cy.elements().removeClass('faded');\n          }\n        });\n      }\n    });\n  }\n\n  /**\n * Generate a random color for each label\n * @param labels array of labels\n */\n  generateRandomColors(labels) {\n    this.colorMap = {};\n    labels.forEach((label) => {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n      while (r + g + b < 382) {\n        r = Math.floor((Math.random() * 255));\n        g = Math.floor((Math.random() * 255));\n        b = Math.floor((Math.random() * 255));\n      }\n      this.colorMap[label] = [r, g, b];\n    });\n  }\n}\n","<div fxFlex #canvas class=\"canvas\"></div>\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { GroupingKey, GroupingType, TimeDimension, TimeField, ChronoUnit, ChronoField, KeysAndLabelsVertexKeys, KeysAndLabelsEdgeKeys, KeysAndLabels } from 'src/gen/generatedAngular';\n\n@Component({\n  selector: 'app-grouping-key',\n  templateUrl: './grouping-key.component.html',\n  styleUrls: ['./grouping-key.component.scss']\n})\nexport class GroupingKeyComponent{\n\n  @Input(\"groupingKey\")\n  public groupingKey: GroupingKey;\n\n  @Input(\"keysAndLabels\")\n  public keysAndLabels: KeysAndLabels;\n\n  @Output(\"groupingKeyRemoved\")\n  public groupingKeyRemoved:EventEmitter<GroupingKey> = new EventEmitter();\n\n\n  public labelSelection: string[] = [];\n  public propertySelection: string[] = [];\n\n\n  constructor() {}\n\n  public chronoFieldEnum = ChronoField;\n  public chronoUnitEnum = ChronoUnit;\n\n  public timeFieldEnum = TimeField;\n  public timeDimensionEnum = TimeDimension;\n  public groupingTypeEnum = GroupingType;\n\n  public isGroupingTimeDimRequired(groupingType: GroupingType): boolean {\n    switch (groupingType) {\n      case GroupingType.DURATION:\n      case GroupingType.TIMEINTERVAL:\n      case GroupingType.TIMESTAMP:\n      case GroupingType.TIMESTAMPFIELD:\n        return true;\n      default:\n        return false;\n    }\n  }\n  public isGroupingTimeFieldRequired(groupingType: GroupingType): boolean {\n    switch (groupingType) {\n      case GroupingType.TIMESTAMP:\n      case GroupingType.TIMESTAMPFIELD:\n        return true;\n      default:\n        return false;\n    }\n  }\n  public filterKeysForLabel(searchedLabel: string) {\n    if (!searchedLabel) {\n      return [];\n    }\n    //Check which Properties are used with the given node label\n    let applicableVertexKeys: KeysAndLabelsVertexKeys[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\n      let correctLabel = vertexKey.labels.filter((label) => {\n        return searchedLabel === label;\n      });\n      return correctLabel.length > 0;\n    });\n    //Check which Properties are used with the given edge label\n    let applicableEdgeKeys: KeysAndLabelsEdgeKeys[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\n      let correctLabel = edgeKey.labels.filter((label) => {\n        return searchedLabel === label;\n      });\n      return correctLabel.length > 0;\n    });\n    return applicableEdgeKeys.concat(applicableVertexKeys);\n  }\n\n  public groupingTypeChanged() {\n    //Change Detection GroupingType\n    switch (this.groupingKey.groupingType) {\n      case GroupingType.DURATION:\n        break;\n      case GroupingType.LABEL:\n        this.groupingKey.forVertex = true;\n        this.groupingKey.labelSpecific = false;\n        this.onVertexToggleChange(true);\n        break;\n      case GroupingType.NOTHING:\n        break;\n      case GroupingType.PROPERTY:\n        this.groupingKey.forVertex = true;\n        this.groupingKey.labelSpecific = false;\n        this.onVertexToggleChange(true);\n        break;\n      case GroupingType.TIMEINTERVAL:\n        break;\n      case GroupingType.TIMESTAMP:\n        break;\n      case GroupingType.TIMESTAMPFIELD:\n        break;\n    }\n  }\n  public labelChanged() {\n\n  }\n\n  onVertexToggleChange(forVertex: boolean) {\n    if (forVertex) {\n      if (this.keysAndLabels && this.keysAndLabels.vertexLabels && this.keysAndLabels.vertexLabels.length > 0) {\n        this.groupingKey.label = this.keysAndLabels.vertexLabels[0];\n        this.labelSelection = this.keysAndLabels.vertexLabels;\n      }\n      else {\n        //TODO: Display Error Message (Please select Graph or Graph is not suitable for this kind of grouping.)\n      }\n    }\n    else {\n      if (this.keysAndLabels && this.keysAndLabels.edgeLabels && this.keysAndLabels.edgeLabels.length > 0) {\n        this.groupingKey.label = this.keysAndLabels.edgeLabels[0];\n        this.labelSelection = this.keysAndLabels.edgeLabels;\n      }\n      else {\n        //TODO: Display Error Message (Please select Graph)\n      }\n    }\n  }\n  removeGroupingKey(){\n    this.groupingKeyRemoved.emit(this.groupingKey);\n  }\n\n}\n","<mat-card style=\"margin-bottom:20px\">\n    <mat-card-content>\n        <!--Grouping Type, always visible-->\n        <mat-form-field matLine>\n            <mat-label>Grouping Type</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.groupingType\"\n                (selectionChange)=\"groupingTypeChanged()\"><!-- [formControlName]=\"'groupingType'\" required>-->\n                <mat-option *ngFor=\"let groupingType of groupingTypeEnum | enumKeysPipe\" [value]=\"groupingType\">\n                    {{groupingType}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error\n                *ngIf=\"groupingForm.controls['groupingType'].hasError('required')\">\n                Must select Type of Grouping Key\n            </mat-error>-->\n        </mat-form-field>\n        <!--Decision if Grouping Key is for Vertices or Edges-->\n        <mat-button-toggle-group [(ngModel)]=\"groupingKey.forVertex\" aria-label=\"Font Style\">\n            <mat-button-toggle [value]=true (change)=\"onVertexToggleChange($event.value)\">Vertices</mat-button-toggle>\n            <mat-button-toggle [value]=false (change)=\"onVertexToggleChange($event.value)\">Edges</mat-button-toggle>\n        </mat-button-toggle-group>\n        <!--LabelSpecific, always visible-->\n        <mat-slide-toggle [(ngModel)]=\"groupingKey.labelSpecific\">LabelSpecific\n        </mat-slide-toggle>\n        <!--Label, required when labelSpecific GroupingKey is being selected-->\n        <mat-form-field matLine\n            *ngIf=\"groupingKey.labelSpecific || groupingKey.groupingType===groupingTypeEnum.PROPERTY\">\n            <mat-label>Label</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.label\" (selectionChange)=\"labelChanged()\"><!-- [formControlName]=\"'label'\" required>-->\n                <mat-option *ngFor=\"let label of labelSelection\" [value]=\"label\">\n                    {{label}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error\n            *ngIf=\"groupingForm.controls['label'].hasError('required')\">\n            Must select Label\n        </mat-error>-->\n        </mat-form-field>\n        <!--Property, required when Property Grouping is selected-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.PROPERTY && groupingKey.label\">\n            <mat-label>Property</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.property\"><!-- [formControlName]=\"'property'\" required>-->\n                <mat-option *ngFor=\"let key of filterKeysForLabel(groupingKey.label)\" [value]=\"key.name\">\n                    {{key.name}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['property'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--TimeDimension, required on all temporal Grouping Keys-->\n        <mat-button-toggle-group *ngIf=\"isGroupingTimeDimRequired(groupingKey.groupingType)\"\n            [(ngModel)]=\"groupingKey.timeDim\">\n            <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\n            <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\n        </mat-button-toggle-group>\n        <!--ChronoField, required on TimeStampField GroupingKey-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.TIMESTAMPFIELD\">\n            <mat-label>ChronoField</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.chronoField\"><!-- [formControlName]=\"'chronoField'\" required>-->\n                <mat-option *ngFor=\"let chronoField of chronoFieldEnum | enumKeysPipe\" [value]=\"chronoField\">\n                    {{chronoField}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['chronoField'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--ChronoUnit, required on duration temporal Grouping Key-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.DURATION\">\n            <mat-label>ChronoUnit</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.chronoUnit\"><!-- [formControlName]=\"'chronoUnit'\" required>-->\n                <mat-option *ngFor=\"let chronoUnit of chronoUnitEnum | enumKeysPipe\" [value]=\"chronoUnit\">\n                    {{chronoUnit}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['chronoUnit'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--TimeField, required on TimeStamp and TimeStampField Grouping Key-->\n        <mat-button-toggle-group *ngIf=\"isGroupingTimeFieldRequired(groupingKey.groupingType)\"\n            [(ngModel)]=\"groupingKey.timeField\">\n            <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\n            <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\n        </mat-button-toggle-group>\n    </mat-card-content>\n    <mat-card-actions [align]=\"'start'\">\n        <button mat-button color=\"warn\" (click)=\"removeGroupingKey()\"><mat-icon>delete</mat-icon></button>\n    </mat-card-actions>\n</mat-card>","<div class=\"content3\" fxFill fxLayout=\"column\">\r\n\r\n    <!--<form #createForm=\"ngForm\" [formGroup]=\"groupingForm\"></form>-->\r\n    <div ngFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\"></app-select-graph>\r\n        <br>\r\n        <button mat-stroked-button color=\"primary\" (click)=\"addGroupingKey()\">Add Grouping Key</button>\r\n        <br>\r\n        <div *ngFor=\"let groupingKey of groupingKeys;let index=index;trackBy:trackByIndex;\">\r\n            <app-grouping-key [(groupingKey)]=\"groupingKeys[index]\" [(keysAndLabels)]=\"keysAndLabels\"\r\n                (groupingKeyRemoved)=\"removeGroupingKey($event)\">\r\n                <!--[groupingForm]=\"groupingForm\"-->\r\n            </app-grouping-key>\r\n        </div>\r\n        <button mat-stroked-button color=\"primary\" (click)=\"addAggregationFunction()\">Add Aggregation Function</button>\r\n        <button mat-stroked-button color=\"warn\" (click)=\"removeAggregationFunction()\"\r\n            *ngIf=\"aggregationFunctions.length>0\">-</button>\r\n        <mat-card\r\n            *ngFor=\"let aggregationFunction of aggregationFunctions;let index=index;trackBy:trackByIndexAggregate;\">\r\n            <!--Aggregation Function, always required-->\r\n            <mat-form-field matLine>\r\n                <mat-label>AggregationType</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].aggregationType\">\r\n                    <mat-option *ngFor=\"let aggrFun of aggregationFunctionEnum | enumKeysPipe\" [value]=\"aggrFun\">\r\n                        {{aggrFun}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--for Vertex or Edge, always required-->\r\n            <mat-button-toggle-group [(ngModel)]=\"aggregationFunctions[index].forEdges\" aria-label=\"Font Style\">\r\n                <mat-button-toggle [value]=false>Vertices</mat-button-toggle>\r\n                <mat-button-toggle [value]=true>Edges</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!-- Property for regular aggregation Functions -->\r\n            <mat-form-field matLine *ngIf=\"isAggrPropertyFieldRequired(aggregationFunctions[index].aggregationType)\">\r\n                <mat-label>Property</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].property\">\r\n                    <mat-option *ngFor=\"let prop of propertiesWithNumericalValues()\" [value]=\"prop\">\r\n                        {{prop}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--Time Dimension for temporal Aggregations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeDimRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeDim\">\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!--TimeField Required for temporal operations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeFieldRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeField\">\r\n                <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n        </mat-card>\r\n\r\n\r\n    </div>\r\n    <button fxFlex=10 mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <!--</form>-->\r\n    <app-graph-canvas fxFlex [forceLayout]=\"true\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\" [showDiff]=\"false\">\r\n    </app-graph-canvas>\r\n\r\n</div>","import { Component, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport * as cytoscape from 'cytoscape';\r\nimport { TimeDimension, ChronoUnit, TimeField, ChronoField, AggregationType, GroupingKey, GroupingType, KeysAndLabels, AggregationKey, KeysAndLabelsVertexKeys, KeysAndLabelsEdgeKeys, Graph } from 'src/gen/generatedAngular';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { GroupingKeyComponent } from '../grouping-key/grouping-key.component';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-grouping',\r\n  templateUrl: './grouping.component.html',\r\n  styleUrls: ['./grouping.component.scss']\r\n})\r\nexport class GroupingComponent {\r\n\r\n  //Currently entered DB Name\r\n  public dbName: string;\r\n  //Grouping Keys\r\n  public groupingKeys: GroupingKey[] = [];\r\n  //Aggregation Functions\r\n  public aggregationFunctions: AggregationKey[] = [];\r\n  public timeStamp = null;\r\n  public chronoFieldEnum = ChronoField;\r\n  public chronoUnitEnum = ChronoUnit;\r\n  public aggregationFunctionEnum = AggregationType;\r\n  public timeFieldEnum = TimeField;\r\n  public timeDimensionEnum = TimeDimension;\r\n  public groupingTypeEnum = GroupingType;\r\n  public keysAndLabels: KeysAndLabels;\r\n  public groupingForm:FormGroup;\r\n  @ViewChild(GroupingKeyComponent) childComponent: GroupingKeyComponent;\r\n  public drawGraphSubject:Subject<Graph> = new Subject<Graph>();\r\n  \r\n\r\n  constructor(public restService: RestService) {\r\n\r\n  }\r\n\r\n  addGroupingKey() {\r\n    this.groupingKeys.push({ groupingType: GroupingType.NOTHING, labelSpecific: false, forVertex: true });\r\n  }\r\n  \r\n  addAggregationFunction() {\r\n    this.aggregationFunctions.push({});\r\n  }\r\n  removeAggregationFunction() {\r\n    this.aggregationFunctions.pop();\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.groupingForm = new FormGroup({\r\n      db: new FormControl('', [Validators.required]),\r\n      groupingType: new FormControl('', Validators.required),\r\n      label: new FormControl('', Validators.required),\r\n      property: new FormControl('', Validators.required),\r\n      chronoUnit: new FormControl('', Validators.required),\r\n      chronoField: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * User presses Execute Button\r\n   * Triggers Backend calls.\r\n   */\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.grouping(this.dbName, this.groupingKeys, this.aggregationFunctions);  \r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  /**\r\n   * Change model when the user changes the db name in the according component\r\n   * \r\n   * @param dbName \r\n   */\r\n  public async onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.keysAndLabels = await this.restService.getKeysAndLabels(dbName);\r\n    console.log(dbName);\r\n  }\r\n  public trackByIndex(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n  public trackByIndexAggregate(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n\r\n  public propertiesWithNumericalValues(): string[] {\r\n    let applicableVertexKeys: string[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\r\n      return vertexKey.numerical;\r\n    }).map((vertexKey) => {\r\n      return vertexKey.name;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys: string[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\r\n      return edgeKey.numerical;\r\n    }).map((edgeKey) => {\r\n      return edgeKey.name;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }\r\n\r\n  public isAggrTimeDimRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MAXTIME:\r\n      case AggregationType.MINDURATION:\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.AVERAGEDURATION:\r\n      case AggregationType.MAXDURATION:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrTimeFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.MAXTIME:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrPropertyFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MIN:\r\n      case AggregationType.MAX:\r\n      case AggregationType.SUM:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public removeGroupingKey(groupingKey:GroupingKey){\r\n    this.groupingKeys.splice(this.groupingKeys.indexOf(groupingKey),1);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"wrapper\"> <!-- give it an id -->\r\n  <div fxLayout=\"row\" fxLayoutGap=\"16px\" fxFill>\r\n      <div fxFlex=\"100\" fxFill>\r\n          <mat-tab-group id=\"tab-group\"> <!-- give it an id -->\r\n            <mat-tab label=\"Snapshot\"><ng-template matTabContent><app-snapshot></app-snapshot></ng-template> </mat-tab>\r\n            <mat-tab label=\"Difference\"> <ng-template matTabContent><app-difference></app-difference></ng-template> </mat-tab>\r\n            <mat-tab label=\"Grouping\"> <ng-template matTabContent><app-grouping></app-grouping> </ng-template> </mat-tab>\r\n          </mat-tab-group>\r\n      </div>\r\n  </div>\r\n</div>\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { SnapshotRequest, TimeDimension, TemporalPredicate, DefaultService, TimeStamp, DifferenceRequest, Graph, GroupingRequest,GroupingKey, AggregationKey, KeysAndLabels, KeysAndLabelsVertexKeys } from 'src/gen/generatedAngular';\r\nimport { TimeSpan } from './time-span';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestService {\r\n\r\n  constructor(public defaultService:DefaultService) {\r\n  }\r\n\r\n  public snapshot(dbName:string,timeStamp:TimeStamp,timeDimension:TimeDimension):Promise<Graph> {    \r\n    let snapshotJson: SnapshotRequest = {\r\n      timeDim: timeDimension,\r\n      timeStamp:\r\n      {\r\n        predicate: timeStamp.predicate,\r\n        startDate: timeStamp.startDate,\r\n        endDate: timeStamp.endDate ?timeStamp.endDate: null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    let result = this.defaultService.snapshot(snapshotJson);\r\n    return result.toPromise();\r\n  }\r\n\r\n  public difference(dbName:string,from:TimeStamp,to:TimeStamp,timeDimension:TimeDimension) {\r\n\r\n    let differenceJson: DifferenceRequest = {\r\n      timeDim: timeDimension,\r\n      from:\r\n      {\r\n        predicate: from.predicate,\r\n        startDate: from.startDate,\r\n        endDate: from.endDate ? from.endDate : null\r\n      },\r\n      to:\r\n      {\r\n        predicate: to.predicate,\r\n        startDate: to.startDate,\r\n        endDate: to.endDate ? to.endDate : null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    return this.defaultService.difference(differenceJson).toPromise();\r\n  }\r\n\r\n  public grouping(dbName:string,groupingKeys:Array<GroupingKey>,aggregationFunctions:Array<AggregationKey>){\r\n    let vertexKeys = groupingKeys.filter((key)=>{\r\n      return key.forVertex;\r\n    });\r\n    let edgeKeys = groupingKeys.filter((key)=>{\r\n      return !key.forVertex;\r\n    });\r\n    let vertexAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let edgeAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let groupingJson: GroupingRequest = {\r\n      dbName:  dbName,\r\n      vertexKeys: vertexKeys,\r\n      edgeKeys: edgeKeys,\r\n      vertexAggrFuncs: vertexAggrFuncs,\r\n      edgeAggrFuncs: edgeAggrFuncs\r\n    }\r\n    return this.defaultService.grouping(groupingJson).toPromise();\r\n  }\r\n/**\r\n  public async getPropertiesForLabel(dbName:string,label:string):Promise<Array<string>>{\r\n    let keys:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return this.filterKeysForLabel(keys,label).map((key)=>{\r\n      return key.name;\r\n    });\r\n  }\r\n\r\n  private filterKeysForLabel(keys:KeysAndLabels,searchedLabel:string){\r\n    //Check which Properties are used with the given node label\r\n    let applicableVertexKeys:KeysAndLabelsVertexKeys[] = keys.vertexKeys.filter((vertexKey)=>{\r\n      let correctLabel = vertexKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys:KeysAndLabelsVertexKeys[] = keys.edgeKeys.filter((edgeKey)=>{\r\n      let correctLabel = edgeKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }**/\r\n\r\n\r\n  public async getKeysAndLabels(dbName:string):Promise<KeysAndLabels>{\r\n    let keysAndLabels:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return keysAndLabels;\r\n  }\r\n\r\n\r\n  public getGraphs():Promise<Array<string>>{\r\n    return this.defaultService.getGraphs().toPromise();\r\n  }\r\n  public getGraph(dbName:string):Promise<Graph>{\r\n    return this.defaultService.getGraph(dbName).toPromise();    \r\n  }\r\n  public getValidTimes(dbName:string):TimeSpan{\r\n    //Backend Call for Valid Times for this db.\r\n    return {\r\n      start: new Date('01 Jan 2018 00:00:00 GMT'),\r\n      end: new Date('01 Jan 2019 00:00:00 GMT')\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","import { Component, OnInit, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport { RestService } from '../rest.service';\n\n@Component({\n  selector: 'app-select-graph',\n  templateUrl: './select-graph.component.html',\n  styleUrls: ['./select-graph.component.scss']\n})\nexport class SelectGraphComponent implements OnInit {\n\n  @Output(\"dbName\") dbEvent = new EventEmitter<string>();\n\n  public graphs: string[]=[];\n  public selectedGraph:string;\n  constructor(public restService:RestService) {\n    restService.getGraphs().then((availableGraphs)=>{\n      this.graphs=availableGraphs;\n    });    \n   }\n\n  ngOnInit(): void {\n  }\n  public publishChanges(){\n    this.dbEvent.emit(this.selectedGraph);\n  }\n}\n","<mat-form-field matLine>\n    <mat-label >Select Graph</mat-label>\n    <mat-select [(ngModel)]=\"selectedGraph\" (selectionChange)=\"publishChanges()\">\n      <mat-option *ngFor=\"let graph of graphs\" [value]=\"graph\">\n        {{graph}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n","<div class=\"content\" fxLayout=\"column\" fxFill>\r\n\r\n    <div fxFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onTimeStampChanged($event)\" label=\"Timestamp\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <app-graph-canvas fxFlex [forceLayout]=\"false\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\"></app-graph-canvas>\r\n\r\n</div>","import { Component } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport { TimeStamp, Graph, TimeDimension } from 'src/gen/generatedAngular';\r\nimport { Subject } from 'rxjs';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n@Component({\r\n  selector: 'app-snapshot',\r\n  templateUrl: './snapshot.component.html',\r\n  styleUrls: ['./snapshot.component.scss']\r\n})\r\nexport class SnapshotComponent {\r\n\r\n  public timeStamp = null;\r\n  public dbName: string;\r\n  public timeDim=\"valid\";\r\n  public drawGraphSubject:Subject<Graph> = new Subject<Graph>();\r\n  public timeSpan:TimeSpan=null;\r\n\r\n  constructor(public restService: RestService) {\r\n  }\r\n\r\n\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.snapshot(this.dbName, this.timeStamp,this.timeDim===\"valid\"?TimeDimension.VALIDTIME:TimeDimension.TRANSACTIONTIME);    \r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  public onTimeStampChanged(timeStamp: TimeStamp) {\r\n    this.timeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.timeSpan=this.restService.getValidTimes(this.dbName);\r\n    console.log(dbName);\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, Output, EventEmitter, AfterViewInit, Input } from '@angular/core';\r\nimport { TemporalPredicate, TimeStamp } from 'src/gen/generatedAngular';\r\nimport { NgxMatDatetimePicker } from '@angular-material-components/datetime-picker';\r\nimport { Moment } from 'moment';\r\nimport { RestService } from '../rest.service';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n\r\n\r\nexport interface PredicateSelectOpt{\r\n  value:TemporalPredicate,\r\n  endRequired:boolean\r\n}\r\n\r\n@Component({\r\n  selector: 'app-time-stamp',\r\n  templateUrl: './time-stamp.component.html',\r\n  styleUrls: ['./time-stamp.component.scss']\r\n})\r\nexport class TimeStampComponent implements AfterViewInit,OnInit {\r\n\r\n  @ViewChild('startPicker') startPicker: NgxMatDatetimePicker<Date>;\r\n  @ViewChild('endPicker') endPicker: NgxMatDatetimePicker<Date>;\r\n\r\n  @Output(\"timeStamp\") timeStampEvent = new EventEmitter<TimeStamp>();\r\n\r\n  @Input(\"label\") label:string;\r\n\r\n  @Input(\"timeSpan\")\r\n  public timeSpan:TimeSpan;\r\n\r\n\r\n\r\n\r\n  selectedPredicate:PredicateSelectOpt;\r\n  predicates:PredicateSelectOpt[]=[];\r\n\r\n  constructor() {\r\n    let keys = Object.keys(TemporalPredicate);\r\n    for (const key of keys) {\r\n      if (key==TemporalPredicate.ASOF) {\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:false}); \r\n      }\r\n      else{\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:true});   \r\n      }\r\n    }\r\n  }\r\n  ngOnInit(){\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.startPicker._selectedChanged.subscribe(()=>{\r\n      this.publishChanges();\r\n    });\r\n\r\n    this.endPicker._selectedChanged.subscribe(()=>{\r\n      this.publishChanges();\r\n    });\r\n\r\n    console.log(this.timeSpan);\r\n  }\r\n\r\n  publishChanges():void{\r\n    this.timeStampEvent.emit(<TimeStamp>{predicate:this.selectedPredicate.value,startDate:this.startPicker._selected,endDate:this.endPicker._selected});\r\n  }\r\n  \r\n\r\n}\r\n","\r\n<mat-form-field matLine>\r\n  <mat-label>{{label}}</mat-label>\r\n  <mat-select [(ngModel)]=\"selectedPredicate\" (selectionChange)=\"publishChanges()\">\r\n    <mat-option *ngFor=\"let predicate of predicates\" [value]=\"predicate\">\r\n      {{predicate.value}}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-error>\r\n\r\n  </mat-error>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"startPicker\" placeholder=\"Select a date\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate\" [min]=\"timeSpan.start\"  [max]=\"timeSpan.end\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #startPicker >\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"endPicker\" placeholder=\"Select an Enddate\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate?.endRequired\" [min]=\"timeSpan.start\"  [max]=\"timeSpan.end\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #endPicker>\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { DifferenceRequest } from '../model/differenceRequest';\nimport { Graph } from '../model/graph';\nimport { GroupingRequest } from '../model/groupingRequest';\nimport { KeysAndLabels } from '../model/keysAndLabels';\nimport { SnapshotRequest } from '../model/snapshotRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = 'http://localhost:2347';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Difference operation\n     * Performs difference operation on a graph\n     * @param differenceRequest Difference request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/difference`,\n            differenceRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return whole graph\n     * Returns the selected Graph in cytoscape format\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraph(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public getGraph(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public getGraph(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public getGraph(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getGraph.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Graph>(`${this.basePath}/graph/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get available Graphs\n     * Get the names of all available graphs on server\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraphs(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;\n    public getGraphs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;\n    public getGraphs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;\n    public getGraphs(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<string>>(`${this.basePath}/graph`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get/Compute Keys and Labels of this database\n     * Labels and Keys for further processing\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getKeys(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<KeysAndLabels>;\n    public getKeys(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getKeys.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<KeysAndLabels>(`${this.basePath}/keys/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * grouping operation\n     * Performs Snapshot operation on a graph\n     * @param groupingRequest Grouping Request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/grouping`,\n            groupingRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Snapshot operation\n     * Performs Snapshot operation on a graph\n     * @param snapshotRequest Snapshot request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/snapshot`,\n            snapshotRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type AggregationType = 'AVERAGEDURATION' | 'MAXDURATION' | 'MAXTIME' | 'MINDURATION' | 'MINTIME' | 'COUNT' | 'MAX' | 'MIN' | 'SUM' | 'NONE';\n\nexport const AggregationType = {\n    AVERAGEDURATION: 'AVERAGEDURATION' as AggregationType,\n    MAXDURATION: 'MAXDURATION' as AggregationType,\n    MAXTIME: 'MAXTIME' as AggregationType,\n    MINDURATION: 'MINDURATION' as AggregationType,\n    MINTIME: 'MINTIME' as AggregationType,\n    COUNT: 'COUNT' as AggregationType,\n    MAX: 'MAX' as AggregationType,\n    MIN: 'MIN' as AggregationType,\n    SUM: 'SUM' as AggregationType,\n    NONE: 'NONE' as AggregationType\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoField = 'NANOOFSECOND' | 'NANOOFDAY' | 'MICROOFSECOND' | 'MICROOFDAY' | 'MILLIOFSECOND' | 'MILLIOFDAY' | 'SECONDOFMINUTE' | 'SECONDOFDAY' | 'MINUTEOFHOUR' | 'MINUTEOFDAY' | 'HOUROFAMPM' | 'HOUROFDAY' | 'CLOCKHOUROFDAY' | 'AMPMOFDAY' | 'DAYOFWEEK' | 'ALIGNEDDAYOFWEEKINMONTH' | 'ALIGNEDDAYOFWEEKINYEAR' | 'DAYOFMONTH' | 'DAYOFYEAR' | 'EPOCHDAY' | 'ALIGNEDWEEKOFMONTH' | 'ALIGNEDWEEKOFYEAR' | 'MONTHOFYEAR' | 'PROLEPTICMONTH' | 'YEAROFERA' | 'YEAR' | 'ERA' | 'INTANTSECONDS' | 'OFFSETSECONDS';\n\nexport const ChronoField = {\n    NANOOFSECOND: 'NANOOFSECOND' as ChronoField,\n    NANOOFDAY: 'NANOOFDAY' as ChronoField,\n    MICROOFSECOND: 'MICROOFSECOND' as ChronoField,\n    MICROOFDAY: 'MICROOFDAY' as ChronoField,\n    MILLIOFSECOND: 'MILLIOFSECOND' as ChronoField,\n    MILLIOFDAY: 'MILLIOFDAY' as ChronoField,\n    SECONDOFMINUTE: 'SECONDOFMINUTE' as ChronoField,\n    SECONDOFDAY: 'SECONDOFDAY' as ChronoField,\n    MINUTEOFHOUR: 'MINUTEOFHOUR' as ChronoField,\n    MINUTEOFDAY: 'MINUTEOFDAY' as ChronoField,\n    HOUROFAMPM: 'HOUROFAMPM' as ChronoField,\n    HOUROFDAY: 'HOUROFDAY' as ChronoField,\n    CLOCKHOUROFDAY: 'CLOCKHOUROFDAY' as ChronoField,\n    AMPMOFDAY: 'AMPMOFDAY' as ChronoField,\n    DAYOFWEEK: 'DAYOFWEEK' as ChronoField,\n    ALIGNEDDAYOFWEEKINMONTH: 'ALIGNEDDAYOFWEEKINMONTH' as ChronoField,\n    ALIGNEDDAYOFWEEKINYEAR: 'ALIGNEDDAYOFWEEKINYEAR' as ChronoField,\n    DAYOFMONTH: 'DAYOFMONTH' as ChronoField,\n    DAYOFYEAR: 'DAYOFYEAR' as ChronoField,\n    EPOCHDAY: 'EPOCHDAY' as ChronoField,\n    ALIGNEDWEEKOFMONTH: 'ALIGNEDWEEKOFMONTH' as ChronoField,\n    ALIGNEDWEEKOFYEAR: 'ALIGNEDWEEKOFYEAR' as ChronoField,\n    MONTHOFYEAR: 'MONTHOFYEAR' as ChronoField,\n    PROLEPTICMONTH: 'PROLEPTICMONTH' as ChronoField,\n    YEAROFERA: 'YEAROFERA' as ChronoField,\n    YEAR: 'YEAR' as ChronoField,\n    ERA: 'ERA' as ChronoField,\n    INTANTSECONDS: 'INTANTSECONDS' as ChronoField,\n    OFFSETSECONDS: 'OFFSETSECONDS' as ChronoField\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoUnit = 'CENTURIES' | 'DAYS' | 'DECADES' | 'ERAS' | 'FOREVER' | 'HALF_DAYS' | 'HOURS' | 'MICROS' | 'MILLENIA' | 'MILLIS' | 'MINUTES' | 'MONTHS' | 'NANOS' | 'SECONDS' | 'WEEKS' | 'YEARS';\n\nexport const ChronoUnit = {\n    CENTURIES: 'CENTURIES' as ChronoUnit,\n    DAYS: 'DAYS' as ChronoUnit,\n    DECADES: 'DECADES' as ChronoUnit,\n    ERAS: 'ERAS' as ChronoUnit,\n    FOREVER: 'FOREVER' as ChronoUnit,\n    HALFDAYS: 'HALF_DAYS' as ChronoUnit,\n    HOURS: 'HOURS' as ChronoUnit,\n    MICROS: 'MICROS' as ChronoUnit,\n    MILLENIA: 'MILLENIA' as ChronoUnit,\n    MILLIS: 'MILLIS' as ChronoUnit,\n    MINUTES: 'MINUTES' as ChronoUnit,\n    MONTHS: 'MONTHS' as ChronoUnit,\n    NANOS: 'NANOS' as ChronoUnit,\n    SECONDS: 'SECONDS' as ChronoUnit,\n    WEEKS: 'WEEKS' as ChronoUnit,\n    YEARS: 'YEARS' as ChronoUnit\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type GroupingType = 'NOTHING' | 'LABEL' | 'PROPERTY' | 'DURATION' | 'TIMEINTERVAL' | 'TIMESTAMP' | 'TIMESTAMPFIELD';\n\nexport const GroupingType = {\n    NOTHING: 'NOTHING' as GroupingType,\n    LABEL: 'LABEL' as GroupingType,\n    PROPERTY: 'PROPERTY' as GroupingType,\n    DURATION: 'DURATION' as GroupingType,\n    TIMEINTERVAL: 'TIMEINTERVAL' as GroupingType,\n    TIMESTAMP: 'TIMESTAMP' as GroupingType,\n    TIMESTAMPFIELD: 'TIMESTAMPFIELD' as GroupingType\n};\n","export * from './aggregationKey';\nexport * from './aggregationType';\nexport * from './chronoField';\nexport * from './chronoUnit';\nexport * from './differenceRequest';\nexport * from './edge';\nexport * from './edgeData';\nexport * from './edgeDataProperties';\nexport * from './graph';\nexport * from './groupingKey';\nexport * from './groupingRequest';\nexport * from './groupingType';\nexport * from './keysAndLabels';\nexport * from './keysAndLabelsEdgeKeys';\nexport * from './keysAndLabelsVertexKeys';\nexport * from './node';\nexport * from './nodeData';\nexport * from './nodeDataProperties';\nexport * from './snapshotRequest';\nexport * from './temporalPredicate';\nexport * from './timeDimension';\nexport * from './timeField';\nexport * from './timeStamp';\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TemporalPredicate = 'ALL' | 'ASOF' | 'BETWEEN' | 'CONTAINEDIN' | 'CREATEDIN' | 'DELETEDIN' | 'FROMTO' | 'OVERLAPS' | 'PRECEDES' | 'SUCCEEDS' | 'VALIDDURING';\n\nexport const TemporalPredicate = {\n    ALL: 'ALL' as TemporalPredicate,\n    ASOF: 'ASOF' as TemporalPredicate,\n    BETWEEN: 'BETWEEN' as TemporalPredicate,\n    CONTAINEDIN: 'CONTAINEDIN' as TemporalPredicate,\n    CREATEDIN: 'CREATEDIN' as TemporalPredicate,\n    DELETEDIN: 'DELETEDIN' as TemporalPredicate,\n    FROMTO: 'FROMTO' as TemporalPredicate,\n    OVERLAPS: 'OVERLAPS' as TemporalPredicate,\n    PRECEDES: 'PRECEDES' as TemporalPredicate,\n    SUCCEEDS: 'SUCCEEDS' as TemporalPredicate,\n    VALIDDURING: 'VALIDDURING' as TemporalPredicate\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeDimension = 'TRANSACTIONTIME' | 'VALIDTIME';\n\nexport const TimeDimension = {\n    TRANSACTIONTIME: 'TRANSACTIONTIME' as TimeDimension,\n    VALIDTIME: 'VALIDTIME' as TimeDimension\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeField = 'FROM' | 'TO';\n\nexport const TimeField = {\n    FROM: 'FROM' as TimeField,\n    TO: 'TO' as TimeField\n};\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}