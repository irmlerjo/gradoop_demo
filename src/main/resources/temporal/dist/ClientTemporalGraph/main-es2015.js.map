{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/aggregation-function/aggregation-function.component.ts","./src/app/aggregation-function/aggregation-function.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/detail-info/detail-info.component.ts","./src/app/detail-info/detail-info.component.html","./src/app/difference/difference.component.ts","./src/app/difference/difference.component.html","./src/app/enum-keys-pipe.ts","./src/app/graph-canvas/graph-canvas.component.ts","./src/app/graph-canvas/graph-canvas.component.html","./src/app/grouping-key/grouping-key.component.ts","./src/app/grouping-key/grouping-key.component.html","./src/app/grouping/grouping.component.ts","./src/app/grouping/grouping.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/app/rest.service.ts","./src/app/select-graph/select-graph.component.ts","./src/app/select-graph/select-graph.component.html","./src/app/snapshot/snapshot.component.ts","./src/app/snapshot/snapshot.component.html","./src/app/time-stamp/time-stamp.component.ts","./src/app/time-stamp/time-stamp.component.html","./src/environments/environment.ts","./src/gen/generatedAngular/api.module.ts","./src/gen/generatedAngular/api/api.ts","./src/gen/generatedAngular/api/default.service.ts","./src/gen/generatedAngular/configuration.ts","./src/gen/generatedAngular/index.ts","./src/gen/generatedAngular/model/aggregationType.ts","./src/gen/generatedAngular/model/chronoField.ts","./src/gen/generatedAngular/model/chronoUnit.ts","./src/gen/generatedAngular/model/groupingType.ts","./src/gen/generatedAngular/model/models.ts","./src/gen/generatedAngular/model/temporalPredicate.ts","./src/gen/generatedAngular/model/timeDimension.ts","./src/gen/generatedAngular/model/timeField.ts","./src/gen/generatedAngular/variables.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAkD;;AAO3C,MAAM,4BAA4B;IAEvC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wGALU,4BAA4B;4GAA5B,4BAA4B;QCPzC,oEAAG;QAAA,sFAA2B;QAAA,4DAAI;;6FDOrB,4BAA4B;cALxC,uDAAS;eAAC;gBACT,QAAQ,EAAE,0BAA0B;gBACpC,WAAW,EAAE,uCAAuC;gBACpD,SAAS,EAAE,CAAC,uCAAuC,CAAC;aACrD;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAA0C;;;AAOnC,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,qBAAqB,CAAC;KAC/B;;wEAFY,YAAY;4FAAZ,YAAY;QCPzB,sEAAqB;;6FDOR,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AAClB;AAEgB;AACT;AACO;AACyB;AAC1B;AACwB;AACX;AACM;AACP;AACR;AACO;AACO;AACmE;AACzE;AACV;AACW;AACP;AAED;AACb;AACW;AACM;AACT;AACG;AACD;AACF;AACe;AACpB;AACW;AACW;AACO;AACwB;AACxB;AACxB;AACqB;;AAkDnE,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBANT;QACX,wEAAc;QACd,0DAAW;KACV,YA7BQ;YACP,uEAAa;YACb,oEAAgB;YAChB,4FAAuB;YACvB,oEAAa;YACb,yEAAe;YACf,gFAAkB;YAClB,iFAAmB;YACnB,uEAAc;YACd,oGAAsB;YACtB,2DAAW;YACX,mEAAmB;YACnB,yEAAe;YACf,wGAA0B;YAC1B,oGAAsB;YACtB,sEAAgB;YAChB,8EAAiB;YACjB,qEAAa;YACb,sEAAgB;YAChB,uEAAc;YACd,qEAAa;YACb,oFAAoB;YACpB,2EAAgB;YAChB,sFAAqB;YACrB,qEAAa;SACd;mIAOU,SAAS,mBA7ClB,2DAAY;QACZ,kEAAa;QACb,yFAAoB;QACpB,8EAAiB;QACjB,oFAAmB;QACnB,+EAAiB;QACjB,oFAAkB;QAClB,6DAAY;QACZ,0FAAoB;QACpB,kHAA4B;QAC5B,0FAAoB;QACpB,uFAAmB,aAGnB,uEAAa;QACb,oEAAgB;QAChB,4FAAuB;QACvB,oEAAa;QACb,yEAAe;QACf,gFAAkB;QAClB,iFAAmB;QACnB,uEAAc;QACd,oGAAsB;QACtB,2DAAW;QACX,mEAAmB;QACnB,yEAAe;QACf,wGAA0B;QAC1B,oGAAsB;QACtB,sEAAgB;QAChB,8EAAiB;QACjB,qEAAa;QACb,sEAAgB;QAChB,uEAAc;QACd,qEAAa;QACb,oFAAoB;QACpB,2EAAgB;QAChB,sFAAqB;QACrB,qEAAa;6FAQJ,SAAS;cA/CrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,kEAAa;oBACb,yFAAoB;oBACpB,8EAAiB;oBACjB,oFAAmB;oBACnB,+EAAiB;oBACjB,oFAAkB;oBAClB,6DAAY;oBACZ,0FAAoB;oBACpB,kHAA4B;oBAC5B,0FAAoB;oBACpB,uFAAmB;iBACpB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,4FAAuB;oBACvB,oEAAa;oBACb,yEAAe;oBACf,gFAAkB;oBAClB,iFAAmB;oBACnB,uEAAc;oBACd,oGAAsB;oBACtB,2DAAW;oBACX,mEAAmB;oBACnB,yEAAe;oBACf,wGAA0B;oBAC1B,oGAAsB;oBACtB,sEAAgB;oBAChB,8EAAiB;oBACjB,qEAAa;oBACb,sEAAgB;oBAChB,uEAAc;oBACd,qEAAa;oBACb,oFAAoB;oBACpB,2EAAgB;oBAChB,sFAAqB;oBACrB,qEAAa;iBACd;gBACD,SAAS,EAAE;oBACX,wEAAc;oBACd,0DAAW;iBACV;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACtFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACe;;;;;;ICIjE,sEACG;IAAA,uDACH;IAAA,4DAAM;;;IADH,0DACH;IADG,6GACH;;;;IAPR,sEACI;IAAA,wEAAqB;IAAA,uDAAwB;IAAA,4DAAK;IAClD,yEACI;IAAA,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAC3B,qEAAI;IAAA,sEAAW;IAAA,4DAAK;IACpB,qHACG;IAEP,4DAAM;IACN,yEACI;IAAA,6EAA0C;IAAvB,yTAAsB;IAAC,iEAAK;IAAA,4DAAS;IAC5D,4DAAM;IACV,4DAAM;;;IAXmB,0DAAwB;IAAxB,qGAAwB;IAErC,0DAAkB;IAAlB,+FAAkB;IAEjB,0DAAwC;IAAxC,+FAAwC;;;IAgB7C,sEACI;IAAA,uDACJ;IAAA,4DAAM;;;IADF,0DACJ;IADI,6GACJ;;;IATR,sEACI;IAAA,wEAAqB;IAAA,uDAAwB;IAAA,4DAAK;IAClD,yEACI;IAAA,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAC3B,qEAAI;IAAA,uDAA0B;IAAA,4DAAK;IACnC,qEAAI;IAAA,uDAA0B;IAAA,4DAAK;IACnC,sEAAI;IAAA,uEAAW;IAAA,4DAAK;IACpB,uHACI;IAER,4DAAM;IACV,4DAAM;;;IAVmB,0DAAwB;IAAxB,qGAAwB;IAErC,0DAAkB;IAAlB,+FAAkB;IAClB,0DAA0B;IAA1B,uGAA0B;IAC1B,0DAA0B;IAA1B,uGAA0B;IAEzB,0DAAwC;IAAxC,+FAAwC;;ADZ9C,MAAM,mBAAmB;IAM9B,YAAmB,SAA4C,EAC7B,IAAI;QADnB,cAAS,GAAT,SAAS,CAAmC;QAC7B,SAAI,GAAJ,IAAI;QACpC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC;SAC7B;aACI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,QAAQ,CAAC;SAC7B;aACI;YACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;SACxB;IACH,CAAC;IAED,QAAQ;IACR,CAAC;IACD,UAAU;QACR,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;;sFAzBU,mBAAmB,0MAOpB,wEAAe;mGAPd,mBAAmB;QCThC,gHACI;QAaJ,gHACI;;QAfC,gFAAkB;QAclB,0DAAmB;QAAnB,iFAAmB;;6FDLX,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;sBAQI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhBe;AAEiC;AAC5C;;;;;;;;;;;;;ICCvB,qFACiB;IADgB,kWAAmC;IACpE,4DAAiB;;;IADwF,qFAAqB;;;;IAE9H,qFACiB;IADgB,gWAAiC;IAClE,4DAAiB;;;IADoF,qFAAqB;;ADK3H,MAAM,mBAAmB;IAa9B,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAVpC,kBAAa,GAAG,IAAI,CAAC;QACrB,gBAAW,GAAG,IAAI,CAAC;QACnB,WAAM,GAAW,IAAI,CAAC;QACtB,YAAO,GAAG,OAAO,CAAC;QAClB,aAAQ,GAAW,IAAI,CAAC;QAGxB,qBAAgB,GAAmB,IAAI,4CAAO,EAAS,CAAC;IAGhB,CAAC;IAGnC,SAAS;;YACpB,IAAI,KAAK,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC,sEAAa,CAAC,SAAS,CAAC,CAAC,CAAC,sEAAa,CAAC,eAAe,CAAC,CAAC;YAC5L,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;KAAA;IACM,aAAa,CAAC,SAAoB;QACvC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IACM,WAAW,CAAC,SAAoB;QACrC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IACM,eAAe,CAAC,MAAc;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;;sFAhCU,mBAAmB;mGAAnB,mBAAmB;QCXhC,yEAEI;QAAA,yEACI;QAAA,sFAA+F;QAA7E,6JAAU,2BAAuB,IAAC;QAAwB,4DAAmB;QAC/F,qIACA;QACA,qIACA;QACA,qFACI;QADa,kMAAqB;QAClC,sFAAgC;QAAA,qEAAU;QAAA,4DAAmB;QAC7D,sFAAsC;QAAA,2EAAgB;QAAA,4DAAmB;QAC7E,4DAAkB;QACtB,4DAAM;QACN,6EAAyD;QAAtB,4IAAS,eAAW,IAAC;QAAC,mEAAO;QAAA,4DAAS;QACzE,kFAAuI;QAG3I,4DAAM;;QAbkB,0DAAgB;QAAhB,8EAAgB;QAEhB,0DAAgB;QAAhB,8EAAgB;QAEf,0DAAqB;QAArB,gFAAqB;QAMjB,0DAAqB;QAArB,8EAAqB;;6FDHrC,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAoD;;AAK7C,MAAM,YAAY;IAEvB,SAAS,CAAC,IAAY;QACpB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;;wEAJU,YAAY;8GAAZ,YAAY;6FAAZ,YAAY;cAHxB,kDAAI;eAAC;gBACJ,IAAI,EAAE,cAAc;aACrB;;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgF;AACzC;AAIoC;;;;;AAOpE,MAAM,oBAAoB;IAqG/B,YAAmB,MAAiB;QAAjB,WAAM,GAAN,MAAM,CAAW;QAvF7B,aAAQ,GAAY,KAAK,CAAC;QAKjC;;;SAGC;QACM,aAAQ,GAAG,EAAE,CAAC;QAOrB;;;WAGG;QACI,mBAAc,GAAG,IAAI,CAAC;QAE7B;;;WAGG;QACI,oBAAe,GAAG,IAAI,CAAC;QAE9B;;;WAGG;QACI,mBAAc,GAAG,CAAC,CAAC;QAE1B;;;WAGG;QACI,iBAAY,GAAG,CAAC,CAAC;QAIhB,eAAU,GAAG;YACnB,IAAI,EAAE,MAAM;YACZ,0BAA0B;YAC1B,KAAK,EAAE;YACP,CAAC;YACD,yBAAyB;YACzB,IAAI,EAAE;YACN,CAAC;YACD,8CAA8C;YAC9C,OAAO,EAAE,KAAK;YACd,yEAAyE;YACzE,2BAA2B;YAC3B,OAAO,EAAE,CAAC;YACV,kDAAkD;YAClD,GAAG,EAAE,IAAI;YACT,iBAAiB;YACjB,OAAO,EAAE,EAAE;YACX,kEAAkE;YAClE,WAAW,EAAE,SAAS;YACtB,uDAAuD;YACvD,SAAS,EAAE,IAAI;YACf,wDAAwD;YACxD,KAAK,EAAE,KAAK;YACZ,8CAA8C;YAC9C,aAAa,EAAE,OAAO;YACtB,0CAA0C;YAC1C,WAAW,EAAE,EAAE;YACf,iCAAiC;YACjC,eAAe,EAAE,CAAC;YAClB,iCAAiC;YACjC,cAAc,EAAE,GAAG;YACnB,4EAA4E;YAC5E,aAAa,EAAE,CAAC;YAChB,2BAA2B;YAC3B,OAAO,EAAE,GAAG;YACZ,0CAA0C;YAC1C,OAAO,EAAE,GAAG;YACZ,kDAAkD;YAClD,WAAW,EAAE,GAAG;YAChB,gFAAgF;YAChF,aAAa,EAAE,IAAI;YACnB,qEAAqE;YACrE,OAAO,EAAE,GAAG;SACb,CAAC;IAGF,CAAC;IAED,UAAU,CAAC,QAAkB,EAAE,QAAkB;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sFAAmB,EAAE;YACpC,IAAI,EAAE;gBACJ,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;aACnB;SACF,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,KAAY,EAAE,EAAE;YACrE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IACD,WAAW;QACT,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC;IAGD,IAAI;QACF,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC;QAC5B,+EAA+E;QAC/E,IAAI,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QAEvB,2EAA2E;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,+CAA+C;QAC/C,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAGlC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,qBAAqB,GAAY,KAAK,CAAC;YAC3C,IAAI,MAAM,GAAG,SAAS,CAAC;YACvB,IAAI,OAAO,GAAG,CAAC,SAAS,CAAC;YACzB,IAAI,kBAAkB,GAAkC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAU,EAAE,EAAE;gBAC1F,IAAI,UAAU,GAAgC,IAAI,CAAC;gBACnD,IAAI,GAAG,GAAW,CAAC,GAAG,CAAC;gBACvB,IAAI,IAAI,GAAW,CAAC,GAAG,CAAC;gBACxB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACxC,IAAI,QAAQ,CAAC,GAAG,KAAK,KAAK,EAAE;wBAC1B,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;qBAC3C;yBAAM,IAAI,QAAQ,CAAC,GAAG,KAAK,MAAM,EAAE;wBAClC,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;qBAC7C;gBACH,CAAC,CAAC,CAAC;gBACH,sHAAsH;gBACtH,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC,GAAG,EAAE;oBACjC,qBAAqB,GAAG,IAAI,CAAC;iBAC9B;gBACD,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,GAAG,GAAG,KAAK,EAAE,CAAC,EAAE,IAAI,GAAG,KAAK,EAAE,CAAC;gBAC1D,OAAO,UAAU,CAAC;YACpB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,qBAAqB,EAAE;gBAC1B,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBAChC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,CAAC;gBAC5B,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAC/B;iBACI;gBACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;SACF;QACD,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC9B,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC9B,IAAI,GAAG,GAAsB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7D,GAAG,CAAC,GAAG,EAAE,CAAC;SACX;QACD,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAChB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,EAAE,GAAG,sCAAS,CAA6B;YAC9C,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,aAAa;YAC7C,KAAK,EAAQ,oDAAqB,EAAE;iBACjC,QAAQ,CAAC,MAAM,CAAC;iBAChB,GAAG,CAAC;gBACH,gCAAgC;gBAChC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;oBAClB,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBAC3B,CAAC;gBACD,uEAAuE;gBACvE,WAAW,EAAE,MAAM;gBACnB,aAAa,EAAE,QAAQ;gBACvB,OAAO,EAAE,OAAO;gBAChB,kBAAkB,EAAE,CAAC,IAAI,EAAE,EAAE;oBAC3B,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjB,IAAI,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;wBACjD,IAAI,IAAI,KAAK,IAAI,EAAE;4BACjB,OAAO,MAAM,CAAC;yBACf;6BACI,IAAI,IAAI,KAAK,GAAG,EAAE;4BACrB,OAAO,MAAM,CAAC;yBACf;6BACI;4BACH,OAAO,MAAM,CAAC;yBACf;qBACF;yBACI;wBACH,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;wBAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACjC,IAAI,MAAM,GAAG,GAAG,CAAC;wBACjB,MAAM,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnD,MAAM,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnD,MAAM,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;wBACnD,OAAO,MAAM,CAAC;qBACf;gBACH,CAAC;gBACD,OAAO,EAAE,MAAM;gBACf,QAAQ,EAAE,MAAM;gBAChB,WAAW,EAAE,MAAM;aACpB,CAAC;iBACD,QAAQ,CAAC,MAAM,CAAC;iBAChB,GAAG,CAAC;gBACH,aAAa,EAAE,QAAQ;gBACvB,gCAAgC;gBAChC,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;oBAClB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC1B,qBAAqB;gBACvB,CAAC;gBACD,uEAAuE;gBACvE,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,CAAC,IAAI,EAAE,EAAE;oBACrB,IAAI,IAAI,GAAW,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC;oBACjD,IAAI,IAAI,KAAK,IAAI,EAAE;wBACjB,OAAO,MAAM,CAAC;qBACf;yBACI,IAAI,IAAI,KAAK,GAAG,EAAE;wBACrB,OAAO,MAAM,CAAC;qBACf;yBACI,IAAI,IAAI,KAAK,GAAG,EAAE;wBACrB,OAAO,MAAM,CAAC;qBACf;yBACI;wBACH,OAAO,MAAM,CAAC;qBACf;gBACH,CAAC;gBACD,qDAAqD;gBACrD,iEAAiE;gBACjE,OAAO,EAAE,CAAC;gBACV,oBAAoB,EAAE,UAAU;gBAChC,oBAAoB,EAAE,MAAM;aAC7B,CAAC;gBACF,8EAA8E;iBAC7E,QAAQ,CAAC,QAAQ,CAAC;iBAClB,GAAG,CAAC;gBACH,SAAS,EAAE,IAAI;gBACf,cAAc,EAAE,CAAC;aAClB,CAAC;iBACD,QAAQ,CAAC,YAAY,CAAC;iBACtB,GAAG,CAAC;gBACH,SAAS,EAAE,CAAC;gBACZ,cAAc,EAAE,CAAC;aAClB,CAAC;SACL,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;YACjB,IAAI,IAAI,CAAC,EAAE,EAAE;gBACX,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;gBACjC;oEACoD;gBACpD,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;oBAC9B,IAAI,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;oBACpB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACjD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;oBAEzB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACrC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oBAElC,IAAI,QAAQ,GAAa,IAAI,CAAC,IAAI,EAAE,CAAC;oBACrC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAC,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;oBAC9B,IAAI,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;oBACpB,IAAI,QAAQ,GAAa,IAAI,CAAC,IAAI,EAAE,CAAC;oBACrC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAC,QAAQ,CAAC,CAAC;gBAEjC,CAAC,CAAC,CAAC;gBACH,2CAA2C;gBAC3C,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;oBACtB,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,EAAE;wBACxB,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;qBACzC;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;KAGC;IACD,oBAAoB,CAAC,MAAM;QACzB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,IAAI,CAAC,GAAG,CAAC,CAAC;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE;gBACtB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;gBACtC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;gBACtC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;aACvC;YACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;;wFA7TU,oBAAoB;oGAApB,oBAAoB;mFAgBF,wDAAU;;;;;QC5BzC,uEAAyC;;6FDY5B,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;kBAIE,mDAAK;mBAAC,gBAAgB;;kBAOtB,mDAAK;mBAAC,aAAa;;kBAGnB,mDAAK;mBAAC,UAAU;;kBAGhB,uDAAS;mBAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,wDAAU,EAAE,MAAM,EAAE,IAAI,EAAE;;;;;;;;;;;;;;AE5BzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyG;AAC8E;;;;;;;;;;;;;;ICMvK,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAF4D,kFAAsB;IAC3F,0DACJ;IADI,2FACJ;;;IAoBA,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAFoC,2EAAe;IAC5D,0DACJ;IADI,oFACJ;;;;IANR,oFAEI;IAAA,4EAAW;IAAA,gEAAK;IAAA,4DAAY;IAC5B,gFAA+E;IAAnE,gXAA+B;IACvC,gJACI;IAER,4DAAa;IAKjB,4DAAiB;;;IATD,0DAA+B;IAA/B,6FAA+B;IAC3B,0DAAoC;IAApC,0FAAoC;;;IAahD,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAFyD,+EAAkB;IACpF,0DACJ;IADI,wFACJ;;;;IALR,oFACI;IAAA,4EAAW;IAAA,mEAAQ;IAAA,4DAAY;IAC/B,gFAA+C;IAAnC,mXAAkC;IAC1C,gJACI;IAER,4DAAa;IAIjB,4DAAiB;;;IARD,0DAAkC;IAAlC,gGAAkC;IAC9B,0DAAyD;IAAzD,wHAAyD;;;;IAS7E,6FAEI;IADA,wYAAiC;IACjC,wFAAyD;IAAA,qEAAU;IAAA,4DAAoB;IACvF,wFAA+D;IAAA,2EAAgB;IAAA,4DAAoB;IACvG,4DAA0B;;;IAHtB,+FAAiC;IACd,0DAAqC;IAArC,qGAAqC;IACrC,0DAA2C;IAA3C,2GAA2C;;;IAM1D,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAF0D,kFAAqB;IACxF,0DACJ;IADI,2FACJ;;;;IALR,oFACI;IAAA,4EAAW;IAAA,sEAAW;IAAA,4DAAY;IAClC,gFAAkD;IAAtC,sXAAqC;IAC7C,gJACI;;IAER,4DAAa;IAIjB,4DAAiB;;;IARD,0DAAqC;IAArC,mGAAqC;IACjC,0DAA0D;IAA1D,4JAA0D;;;IAYtE,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAFwD,iFAAoB;IACrF,0DACJ;IADI,0FACJ;;;;IALR,oFACI;IAAA,4EAAW;IAAA,qEAAU;IAAA,4DAAY;IACjC,gFAAiD;IAArC,qXAAoC;IAC5C,gJACI;;IAER,4DAAa;IAIjB,4DAAiB;;;IARD,0DAAoC;IAApC,kGAAoC;IAChC,0DAAwD;IAAxD,2JAAwD;;;;IAS5E,6FAEI;IADA,0YAAmC;IACnC,wFAAgD;IAAA,+DAAI;IAAA,4DAAoB;IACxE,wFAA8C;IAAA,6DAAE;IAAA,4DAAoB;IACxE,4DAA0B;;;IAHtB,iGAAmC;IAChB,0DAA4B;IAA5B,4FAA4B;IAC5B,0DAA0B;IAA1B,0FAA0B;;AD5ElD,MAAM,oBAAoB;IAgB/B;QAPO,uBAAkB,GAA6B,IAAI,0DAAY,EAAE,CAAC;QAGlE,mBAAc,GAAa,EAAE,CAAC;QAC9B,sBAAiB,GAAa,EAAE,CAAC;QAKjC,oBAAe,GAAG,oEAAW,CAAC;QAC9B,mBAAc,GAAG,mEAAU,CAAC;QAE5B,kBAAa,GAAG,kEAAS,CAAC;QAC1B,sBAAiB,GAAG,sEAAa,CAAC;QAClC,qBAAgB,GAAG,qEAAY,CAAC;IAPxB,CAAC;IAST,yBAAyB,CAAC,YAA0B;QACzD,QAAQ,YAAY,EAAE;YACpB,KAAK,qEAAY,CAAC,QAAQ,CAAC;YAC3B,KAAK,qEAAY,CAAC,YAAY,CAAC;YAC/B,KAAK,qEAAY,CAAC,SAAS,CAAC;YAC5B,KAAK,qEAAY,CAAC,cAAc;gBAC9B,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IACM,2BAA2B,CAAC,YAA0B;QAC3D,QAAQ,YAAY,EAAE;YACpB,KAAK,qEAAY,CAAC,SAAS,CAAC;YAC5B,KAAK,qEAAY,CAAC,cAAc;gBAC9B,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IACM,kBAAkB,CAAC,aAAqB;QAC7C,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO,EAAE,CAAC;SACX;QACD,2DAA2D;QAC3D,IAAI,oBAAoB,GAA8B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE;YACvG,IAAI,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnD,OAAO,aAAa,KAAK,KAAK,CAAC;YACjC,CAAC,CAAC,CAAC;YACH,OAAO,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,2DAA2D;QAC3D,IAAI,kBAAkB,GAA4B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAC/F,IAAI,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACjD,OAAO,aAAa,KAAK,KAAK,CAAC;YACjC,CAAC,CAAC,CAAC;YACH,OAAO,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACzD,CAAC;IAEM,mBAAmB;QACxB,+BAA+B;QAC/B,QAAQ,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;YACrC,KAAK,qEAAY,CAAC,QAAQ;gBACxB,MAAM;YACR,KAAK,qEAAY,CAAC,KAAK;gBACrB,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;gBAClC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,KAAK,CAAC;gBACvC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAChC,MAAM;YACR,KAAK,qEAAY,CAAC,OAAO;gBACvB,MAAM;YACR,KAAK,qEAAY,CAAC,QAAQ;gBACxB,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;gBAClC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,KAAK,CAAC;gBACvC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAChC,MAAM;YACR,KAAK,qEAAY,CAAC,YAAY;gBAC5B,MAAM;YACR,KAAK,qEAAY,CAAC,SAAS;gBACzB,MAAM;YACR,KAAK,qEAAY,CAAC,cAAc;gBAC9B,MAAM;SACT;IACH,CAAC;IACM,YAAY;IAEnB,CAAC;IAED,oBAAoB,CAAC,SAAkB;QACrC,IAAI,SAAS,EAAE;YACb,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;aACvD;iBACI;gBACH,uGAAuG;aACxG;SACF;aACI;YACH,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;aACrD;iBACI;gBACH,mDAAmD;aACpD;SACF;IACH,CAAC;IACD,iBAAiB;QACf,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,CAAC;;wFArHU,oBAAoB;oGAApB,oBAAoB;QCRjC,8EACI;QAAA,mFACI;QACA,oFACI;QAAA,4EAAW;QAAA,wEAAa;QAAA,4DAAY;QACpC,gFAC8C;QADlC,+MAAsC,4GAC3B,yBAAqB,IADM;QAE9C,8HACI;;QAER,4DAAa;QAKjB,4DAAiB;QAEjB,6FACI;QADqB,yNAAmC;QACxD,uFAA8E;QAA9C,+JAAU,sCAAkC,IAAC;QAAC,oEAAQ;QAAA,4DAAoB;QAC1G,wFAA+E;QAA9C,gKAAU,sCAAkC,IAAC;QAAC,iEAAK;QAAA,4DAAoB;QAC5G,4DAA0B;QAE1B,uFAA0D;QAAxC,uNAAuC;QAAC,0EAC1D;QAAA,4DAAmB;QAEnB,wIAEI;QAYJ,wIACI;QAWJ,0JAEI;QAIJ,wIACI;QAWJ,wIACI;QAWJ,0JAEI;QAGR,4DAAmB;QACnB,uFACI;QAAA,8EAA8D;QAA9B,6IAAS,uBAAmB,IAAC;QAAC,4EAAU;QAAA,kEAAM;QAAA,4DAAW;QAAA,4DAAS;QACtG,4DAAmB;QACvB,4DAAW;;QArFa,0DAAsC;QAAtC,iGAAsC;QAElC,0DAA4D;QAA5D,2JAA4D;QAUvD,0DAAmC;QAAnC,8FAAmC;QACrC,0DAAY;QAAZ,uEAAY;QACZ,0DAAa;QAAb,wEAAa;QAGlB,0DAAuC;QAAvC,kGAAuC;QAIrD,0DAAyF;QAAzF,iKAAyF;QAarE,0DAAiF;QAAjF,yJAAiF;QAYhF,0DAA2D;QAA3D,6HAA2D;QAM5D,0DAAkE;QAAlE,sIAAkE;QAYlE,0DAA4D;QAA5D,gIAA4D;QAY3D,0DAA6D;QAA7D,+HAA6D;QAMxE,0DAAiB;QAAjB,0EAAiB;;6FD/E1B,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;kBAGE,mDAAK;mBAAC,aAAa;;kBAGnB,mDAAK;mBAAC,eAAe;;kBAGrB,oDAAM;mBAAC,oBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEhBsC;AAG2J;AAC3J;AACU;AAC/C;;;;;;;;;;;;;;;;;;ICEvB,sEACI;IAAA,sFAGmB;IAHD,+YAAqC;IAGvD,4DAAmB;IACvB,4DAAM;;;;IAJgB,0DAAqC;IAArC,sGAAqC;;;;IAM3D,4EAC0C;IADF,0UAAqC;IACnC,4DAAC;IAAA,4DAAS;;;IAOxC,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAF8D,8EAAiB;IACxF,0DACJ;IADI,uFACJ;;;IAYA,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAFoD,2EAAc;IAC3E,0DACJ;IADI,oFACJ;;;;IALR,qFACI;IAAA,4EAAW;IAAA,mEAAQ;IAAA,4DAAY;IAC/B,iFACI;IADQ,ueAAkD;IAC1D,0JACI;IAER,4DAAa;IACjB,4DAAiB;;;;IALD,0DAAkD;IAAlD,qHAAkD;IAC9C,0DAAoD;IAApD,4GAAoD;;;;IAMxE,8FAEI;IADA,4fAAiD;IACjD,wFAAyD;IAAA,qEAAU;IAAA,4DAAoB;IACvF,wFAA+D;IAAA,2EAAgB;IAAA,4DAAoB;IACvG,4DAA0B;;;;IAHtB,oHAAiD;IAC9B,0DAAqC;IAArC,sGAAqC;IACrC,0DAA2C;IAA3C,4GAA2C;;;;IAGlE,8FAEI;IADA,8fAAmD;IACnD,wFAAgD;IAAA,+DAAI;IAAA,4DAAoB;IACxE,wFAA8C;IAAA,6DAAE;IAAA,4DAAoB;IACxE,4DAA0B;;;;IAHtB,sHAAmD;IAChC,0DAA4B;IAA5B,6FAA4B;IAC5B,0DAA0B;IAA1B,2FAA0B;;;;IAnCrD,2EAEI;IACA,qFACI;IAAA,4EAAW;IAAA,0EAAe;IAAA,4DAAY;IACtC,iFACI;IADQ,kaAAyD;IACjE,wIACI;;IAER,4DAAa;IACjB,4DAAiB;IAEjB,8FACI;IADqB,waAAkD;IACvE,wFAAiC;IAAA,mEAAQ;IAAA,4DAAoB;IAC7D,yFAAgC;IAAA,iEAAK;IAAA,4DAAoB;IAC7D,4DAA0B;IAE1B,kJACI;IAQJ,oKAEI;IAIJ,oKAEI;IAGR,4DAAW;;;;IAhCS,0DAAyD;IAAzD,2HAAyD;IACrD,0DAA8D;IAA9D,oKAA8D;IAMzD,0DAAkD;IAAlD,oHAAkD;IACpD,0DAAa;IAAb,wEAAa;IACb,0DAAY;IAAZ,uEAAY;IAGX,0DAAgF;IAAhF,4JAAgF;IAS/E,0DAA0E;IAA1E,sJAA0E;IAM1E,0DAA4E;IAA5E,wJAA4E;;ADlC1G,MAAM,iBAAiB;IAqB5B,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAjB3C,eAAe;QACR,iBAAY,GAAkB,EAAE,CAAC;QACxC,uBAAuB;QAChB,yBAAoB,GAAqB,EAAE,CAAC;QAC5C,cAAS,GAAG,IAAI,CAAC;QACjB,oBAAe,GAAG,oEAAW,CAAC;QAC9B,mBAAc,GAAG,mEAAU,CAAC;QAC5B,4BAAuB,GAAG,wEAAe,CAAC;QAC1C,kBAAa,GAAG,kEAAS,CAAC;QAC1B,sBAAiB,GAAG,sEAAa,CAAC;QAClC,qBAAgB,GAAG,qEAAY,CAAC;QAIhC,qBAAgB,GAAkB,IAAI,4CAAO,EAAS,CAAC;IAK9D,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,qEAAY,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxG,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;IACD,yBAAyB;QACvB,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,wDAAS,CAAC;YAChC,EAAE,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,YAAY,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtD,KAAK,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC/C,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAClD,UAAU,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACpD,WAAW,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACtD,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACU,SAAS;;YACpB,IAAI,KAAK,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAC9G,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;KAAA;IACD;;;;OAIG;IACU,eAAe,CAAC,MAAc;;YACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;KAAA;IACM,YAAY,CAAC,KAAa,EAAE,GAAQ;QACzC,OAAO,KAAK,CAAC;IACf,CAAC;IACM,qBAAqB,CAAC,KAAa,EAAE,GAAQ;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,6BAA6B;QAClC,IAAI,oBAAoB,GAAa,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE;YACtF,OAAO,SAAS,CAAC,SAAS,CAAC;QAC7B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YACnB,OAAO,SAAS,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,2DAA2D;QAC3D,IAAI,kBAAkB,GAAa,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;YAChF,OAAO,OAAO,CAAC,SAAS,CAAC;QAC3B,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YACjB,OAAO,OAAO,CAAC,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACzD,CAAC;IAEM,qBAAqB,CAAC,QAAyB;QACpD,QAAQ,QAAQ,EAAE;YAChB,KAAK,wEAAe,CAAC,OAAO,CAAC;YAC7B,KAAK,wEAAe,CAAC,WAAW,CAAC;YACjC,KAAK,wEAAe,CAAC,OAAO,CAAC;YAC7B,KAAK,wEAAe,CAAC,eAAe,CAAC;YACrC,KAAK,wEAAe,CAAC,WAAW;gBAC9B,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IACM,uBAAuB,CAAC,QAAyB;QACtD,QAAQ,QAAQ,EAAE;YAChB,KAAK,wEAAe,CAAC,OAAO,CAAC;YAC7B,KAAK,wEAAe,CAAC,OAAO;gBAC1B,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IACM,2BAA2B,CAAC,QAAyB;QAC1D,QAAQ,QAAQ,EAAE;YAChB,KAAK,wEAAe,CAAC,GAAG,CAAC;YACzB,KAAK,wEAAe,CAAC,GAAG,CAAC;YACzB,KAAK,wEAAe,CAAC,GAAG;gBACtB,OAAO,IAAI,CAAC;YACd;gBACE,OAAO,KAAK,CAAC;SAChB;IACH,CAAC;IACM,iBAAiB,CAAC,WAAuB;QAC9C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,EAAC,CAAC,CAAC,CAAC;IACrE,CAAC;;kFAxHU,iBAAiB;iGAAjB,iBAAiB;kEAiBjB,yFAAoB;;;;;QChCjC,yEAEI;QACA,yEACI;QAAA,sFAAwE;QAAtD,2JAAU,2BAAuB,IAAC;QAAC,4DAAmB;QACxE,gEACA;QAAA,4EAAsE;QAA3B,yIAAS,oBAAgB,IAAC;QAAC,2EAAgB;QAAA,4DAAS;QAC/F,gEACA;QAAA,6GACI;QAKJ,4EAA8E;QAAnC,yIAAS,4BAAwB,IAAC;QAAC,mFAAwB;QAAA,4DAAS;QAC/G,qHAC0C;QAC1C,2HAEI;QAsCR,4DAAM;QACN,6EAAmE;QAAtB,0IAAS,eAAW,IAAC;QAAC,mEAAO;QAAA,4DAAS;QAEnF,kFACmB;QAEvB,4DAAM;;QAvDO,0DAA8E;QAA9E,qFAA8E;QAQ/E,0DAAqC;QAArC,qGAAqC;QAErC,0DAAuG;QAAvG,6FAAuG;QA0CtF,0DAAoB;QAApB,6EAAoB;;6FD7CpC,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;kBAkBE,uDAAS;mBAAC,yFAAoB;;;;;;;;;;;;;;AEhCjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;;ICIe,0EAA6B;;;IAC1B,4EAAiC;;;IACnC,0EAA6B;;ADCxF,MAAM,aAAa;IAExB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;0EALU,aAAa;6FAAb,aAAa;QCP1B,yEAAmB;QACjB,yEACI;QAAA,yEACI;QAAA,mFAA+B;QAC7B,6EAA0B;QAAA,yHAA2B;QAA4C,4DAAU;QAC3G,6EAA6B;QAAA,yHAA2B;QAAgD,4DAAU;QAClH,6EAA2B;QAAA,yHAA2B;QAA6C,4DAAU;QAC/G,4DAAgB;QACpB,4DAAM;QACV,4DAAM;QACR,4DAAM;;6FDHO,aAAa;cALzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;;;;;;;AENkD;;;AAO5C,MAAM,WAAW;IAEtB,YAAmB,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;IAChD,CAAC;IAEM,QAAQ,CAAC,MAAa,EAAC,SAAmB,EAAC,aAA2B;QAC3E,IAAI,YAAY,GAAoB;YAClC,OAAO,EAAE,aAAa;YACtB,SAAS,EACT;gBACE,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,UAAS,CAAC,OAAO,EAAC,CAAC,IAAI;aACpD;YACD,MAAM,EAAE,MAAM;SACf;QACD,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;IAEM,UAAU,CAAC,MAAa,EAAC,IAAc,EAAC,EAAY,EAAC,aAA2B;QAErF,IAAI,cAAc,GAAsB;YACtC,OAAO,EAAE,aAAa;YACtB,IAAI,EACJ;gBACE,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;aAC5C;YACD,EAAE,EACF;gBACE,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;aACxC;YACD,MAAM,EAAE,MAAM;SACf;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,CAAC;IACpE,CAAC;IAEM,QAAQ,CAAC,MAAa,EAAC,YAA+B,EAAC,oBAA0C;QACtG,IAAI,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAC,EAAE;YAC1C,OAAO,GAAG,CAAC,SAAS,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAC,EAAE;YACxC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,eAAe,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAC,EAAE;YAC5D,OAAO,QAAQ,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAC,EAAE;YAC1D,OAAO,QAAQ,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,GAAoB;YAClC,MAAM,EAAG,MAAM;YACf,UAAU,EAAE,UAAU;YACtB,QAAQ,EAAE,QAAQ;YAClB,eAAe,EAAE,eAAe;YAChC,aAAa,EAAE,aAAa;SAC7B;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;IAChE,CAAC;IACH;;;;;;;;;;;;;;;;;;;;;;;;UAwBM;IAGS,gBAAgB,CAAC,MAAa;;YACzC,IAAI,aAAa,GAAiB,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;YACxF,OAAO,aAAa,CAAC;QACvB,CAAC;KAAA;IAGM,SAAS;QACd,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,CAAC;IACrD,CAAC;IACM,QAAQ,CAAC,MAAa;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1D,CAAC;IACM,aAAa,CAAC,MAAa;QAChC,2CAA2C;QAC3C,OAAO;YACL,KAAK,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;YAC3C,GAAG,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;SAC1C;IACH,CAAC;;sEA5GU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuF;;;;;;;;;ICGjF,gFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF4B,2EAAe;IACtD,0DACF;IADE,oFACF;;ADGC,MAAM,oBAAoB;IAM/B,YAAmB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAJxB,YAAO,GAAG,IAAI,0DAAY,EAAU,CAAC;QAEhD,WAAM,GAAW,EAAE,CAAC;QAGzB,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,eAAe,EAAC,EAAE;YAC9C,IAAI,CAAC,MAAM,GAAC,eAAe,CAAC;QAC9B,CAAC,CAAC,CAAC;IACJ,CAAC;IAEF,QAAQ;IACR,CAAC;IACM,cAAc;QACnB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;;wFAhBU,oBAAoB;oGAApB,oBAAoB;QCRjC,oFACI;QAAA,4EAAY;QAAA,uEAAY;QAAA,4DAAY;QACpC,gFACE;QADU,oMAA2B,4GAAoB,oBAAgB,IAApC;QACrC,8HACE;QAEJ,4DAAa;QACf,4DAAiB;;QALH,0DAA2B;QAA3B,sFAA2B;QACzB,0DAA4B;QAA5B,+EAA4B;;6FDKjC,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;kBAGE,oDAAM;mBAAC,QAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEVwB;AAEiC;AAC5C;;;;;;;;;;;;;ICCvB,oFACiB;IADgB,qWAAwC;IACzE,4DAAiB;;;IADkG,qFAAqB;;ADOzI,MAAM,iBAAiB;IAQ5B,YAAmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QANpC,cAAS,GAAG,IAAI,CAAC;QAEjB,YAAO,GAAC,OAAO,CAAC;QAChB,qBAAgB,GAAkB,IAAI,4CAAO,EAAS,CAAC;QACvD,aAAQ,GAAU,IAAI,CAAC;IAG9B,CAAC;IAGY,SAAS;;YACpB,IAAI,KAAK,GAAU,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,OAAO,KAAG,OAAO,EAAC,uEAAa,CAAC,SAAS,EAAC,uEAAa,CAAC,eAAe,CAAC,CAAC;YAC7J,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC;KAAA;IACM,kBAAkB,CAAC,SAAoB;QAC5C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IACM,eAAe,CAAC,MAAc;QACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;;kFAxBU,iBAAiB;iGAAjB,iBAAiB;QCX9B,yEAEI;QAAA,yEACI;QAAA,sFAA+F;QAA7E,2JAAU,2BAAuB,IAAC;QAAwB,4DAAmB;QAC/F,mIACA;QACA,qFACI;QADa,gMAAqB;QAClC,sFAAgC;QAAA,qEAAU;QAAA,4DAAmB;QAC7D,sFAAsC;QAAA,2EAAgB;QAAA,4DAAmB;QAC7E,4DAAkB;QACtB,4DAAM;QACN,4EAAyD;QAAtB,yIAAS,eAAW,IAAC;QAAC,mEAAO;QAAA,4DAAS;QACzE,kFAAqH;QAEzH,4DAAM;;QAVkB,0DAAgB;QAAhB,8EAAgB;QAEf,0DAAqB;QAArB,gFAAqB;QAMjB,0DAAqB;QAArB,8EAAqB;;6FDDrC,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyG;AACjC;;;;;;;;;;;;;ICGpE,gFACE;IAAA,uDACF;IAAA,4DAAa;;;IAFoC,+EAAmB;IAClE,0DACF;IADE,8FACF;;ADaG,MAAM,kBAAkB;IAkB7B;QAbqB,mBAAc,GAAG,IAAI,0DAAY,EAAa,CAAC;QAWpE,eAAU,GAAsB,EAAE,CAAC;QAGjC,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,0EAAiB,CAAC,CAAC;QAC1C,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,IAAI,GAAG,IAAE,0EAAiB,CAAC,IAAI,EAAE;gBAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAqB,EAAC,KAAK,EAAC,GAAG,EAAC,WAAW,EAAC,KAAK,EAAC,CAAC,CAAC;aACzE;iBACG;gBACF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAqB,EAAC,KAAK,EAAC,GAAG,EAAC,WAAW,EAAC,IAAI,EAAC,CAAC,CAAC;aACxE;SACF;IACH,CAAC;IACD,QAAQ;IACR,CAAC;IAED,eAAe;QACb,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAE,EAAE;YAC9C,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAE,EAAE;YAC5C,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAY,EAAC,SAAS,EAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAC,SAAS,EAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAC,OAAO,EAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAC,CAAC,CAAC;IACtJ,CAAC;;oFA9CU,kBAAkB;kGAAlB,kBAAkB;;;;;;;;QClB/B,oFACE;QAAA,4EAAW;QAAA,uDAAS;QAAA,4DAAY;QAChC,gFACE;QADU,sMAA+B,0GAAoB,oBAAgB,IAApC;QACzC,4HACE;QAEJ,4DAAa;QACb,uEAEY;QACd,4DAAiB;QACjB,oFACE;QAAA,2EACA;QADiF,2IAAU,oBAAgB,IAAC;QAA5G,4DACA;QAAA,sFAA6E;QAC7E,8FAC0B;QAC5B,4DAAiB;QACjB,qFACE;QAAA,4EACA;QADmF,4IAAU,oBAAgB,IAAC;QAA9G,4DACA;QAAA,uFAA2E;QAC3E,+FAC0B;QAC5B,4DAAiB;;;;QArBJ,0DAAS;QAAT,0EAAS;QACR,0DAA+B;QAA/B,0FAA+B;QAC7B,0DAAoC;QAApC,mFAAoC;QASlC,0DAAoC;QAApC,qFAAoC;QACnB,0DAAmB;QAAnB,oEAAmB;QAKpC,0DAAkC;QAAlC,qFAAkC;QACjB,0DAAiB;QAAjB,oEAAiB;;6FDDvC,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;kBAGE,uDAAS;mBAAC,aAAa;;kBACvB,uDAAS;mBAAC,WAAW;;kBAErB,oDAAM;mBAAC,WAAW;;kBAElB,mDAAK;mBAAC,OAAO;;kBAEb,mDAAK;mBAAC,UAAU;;;;;;;;;;;;;;AE5BnB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkF;AAClC;AAIO;;;AAShD,MAAM,SAAS;IAQlB,YAAqC,YAAuB,EACnC,IAAgB;QACrC,IAAI,YAAY,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACvF;QACD,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,+DAA+D;gBAC/E,0DAA0D,CAAC,CAAC;SAC/D;IACL,CAAC;IAhBM,MAAM,CAAC,OAAO,CAAC,oBAAyC;QAC3D,OAAO;YACH,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,4DAAa,EAAE,UAAU,EAAE,oBAAoB,EAAE,CAAE;SAC9E,CAAC;IACN,CAAC;;wFANQ,SAAS;4IAAT,SAAS,yDAQiC,SAAS,kJAXnD;QACT,mEAAc;KAAE,YAJJ,EAAE;6FAML,SAAS;cAPrB,sDAAQ;eAAC;gBACR,OAAO,EAAO,EAAE;gBAChB,YAAY,EAAE,EAAE;gBAChB,OAAO,EAAO,EAAE;gBAChB,SAAS,EAAE;oBACT,mEAAc;iBAAE;aACnB;sCASsD,SAAS;sBAA9C,sDAAQ;;sBAAI,sDAAQ;;sBACpB,sDAAQ;;;;;;;;;;;;;;ACvB1B;AAAA;AAAA;AAAA;AAAA;AAAkC;AACiB;AAC5C,MAAM,IAAI,GAAG,CAAC,+DAAc,CAAC,CAAC;;;;;;;;;;;;;ACFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;GAUG;AACH,uDAAuD;AAE2B;AAEO;AAWR;AACI;;;;AAI9E,MAAM,cAAc;IAMvB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QAJlC,aAAQ,GAAG,uBAAuB,CAAC;QACtC,mBAAc,GAAG,IAAI,gEAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,4DAAa,EAAE,CAAC;QAGvC,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QACD,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,aAAa,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;SACvE;IACL,CAAC;IAED;;;OAGG;IACK,cAAc,CAAC,QAAkB;QACrC,MAAM,IAAI,GAAG,qBAAqB,CAAC;QACnC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC5B,IAAI,IAAI,KAAK,OAAO,EAAE;gBAClB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAaM,UAAU,CAAC,iBAAqC,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAG3G,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa;YACvB,kBAAkB;SACrB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,IAAI,SAAS,EAAE;YACtC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClE;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAQ,GAAG,IAAI,CAAC,QAAQ,aAAa,EAC5D,iBAAiB,EACjB;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;IAYM,QAAQ,CAAC,YAAoB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAExF,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,8EAA8E,CAAC,CAAC;SACnG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa;YACvB,kBAAkB;SACrB,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAQ,GAAG,IAAI,CAAC,QAAQ,UAAU,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,EACnG,IAAI,EACJ;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;IAWM,SAAS,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEnE,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAgB,GAAG,IAAI,CAAC,QAAQ,QAAQ,EAC9D;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;IAYM,OAAO,CAAC,YAAoB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEvF,IAAI,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,SAAS,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;SAClG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa;YACvB,kBAAkB;SACrB,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAgB,GAAG,IAAI,CAAC,QAAQ,SAAS,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,EAC1G,IAAI,EACJ;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;IAYM,QAAQ,CAAC,eAAiC,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAGrG,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa;YACvB,kBAAkB;SACrB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,IAAI,SAAS,EAAE;YACtC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClE;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAQ,GAAG,IAAI,CAAC,QAAQ,WAAW,EAC1D,eAAe,EACf;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;IAYM,QAAQ,CAAC,eAAiC,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAGrG,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAElC,iCAAiC;QACjC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;QAED,uCAAuC;QACvC,MAAM,QAAQ,GAAa;YACvB,kBAAkB;SACrB,CAAC;QACF,MAAM,uBAAuB,GAAuB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACzG,IAAI,uBAAuB,IAAI,SAAS,EAAE;YACtC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;SAClE;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAQ,GAAG,IAAI,CAAC,QAAQ,WAAW,EAC1D,eAAe,EACf;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;IACN,CAAC;;4EA3RQ,cAAc,kLAM0C,oDAAS;iGANjE,cAAc,WAAd,cAAc;6FAAd,cAAc;cAD1B,wDAAU;;sBAOwC,sDAAQ;;sBAAG,oDAAM;uBAAC,oDAAS;;sBAAqB,sDAAQ;;;;;;;;;;;;;;AC5B3G;AAAA;AAAO,MAAM,aAAa;IAQtB,YAAY,0BAAmD,EAAE;QAC7D,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC;IACnE,CAAC;IAED;;;;;;OAMG;IACI,uBAAuB,CAAE,YAAsB;QAClD,IAAI,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE;YAC1B,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACI,kBAAkB,CAAC,OAAiB;QACvC,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;YACrB,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACrB;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;;;;;OASG;IACI,UAAU,CAAC,IAAY;QAC1B,MAAM,QAAQ,GAAW,IAAI,MAAM,CAAC,+DAA+D,EAAE,GAAG,CAAC,CAAC;QAC1G,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,6BAA6B,CAAC,CAAC;IACzG,CAAC;CACJ;;;;;;;;;;;;;AC9ED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACK;AACH;AACI;AACH;;;;;;;;;;;;;ACJ7B;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,eAAe,GAAG;IAC3B,eAAe,EAAE,iBAAoC;IACrD,WAAW,EAAE,aAAgC;IAC7C,OAAO,EAAE,SAA4B;IACrC,WAAW,EAAE,aAAgC;IAC7C,OAAO,EAAE,SAA4B;IACrC,KAAK,EAAE,OAA0B;IACjC,GAAG,EAAE,KAAwB;IAC7B,GAAG,EAAE,KAAwB;IAC7B,GAAG,EAAE,KAAwB;IAC7B,IAAI,EAAE,MAAyB;CAClC,CAAC;;;;;;;;;;;;;AC1BF;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,WAAW,GAAG;IACvB,YAAY,EAAE,cAA6B;IAC3C,SAAS,EAAE,WAA0B;IACrC,aAAa,EAAE,eAA8B;IAC7C,UAAU,EAAE,YAA2B;IACvC,aAAa,EAAE,eAA8B;IAC7C,UAAU,EAAE,YAA2B;IACvC,cAAc,EAAE,gBAA+B;IAC/C,WAAW,EAAE,aAA4B;IACzC,YAAY,EAAE,cAA6B;IAC3C,WAAW,EAAE,aAA4B;IACzC,UAAU,EAAE,YAA2B;IACvC,SAAS,EAAE,WAA0B;IACrC,cAAc,EAAE,gBAA+B;IAC/C,SAAS,EAAE,WAA0B;IACrC,SAAS,EAAE,WAA0B;IACrC,uBAAuB,EAAE,yBAAwC;IACjE,sBAAsB,EAAE,wBAAuC;IAC/D,UAAU,EAAE,YAA2B;IACvC,SAAS,EAAE,WAA0B;IACrC,QAAQ,EAAE,UAAyB;IACnC,kBAAkB,EAAE,oBAAmC;IACvD,iBAAiB,EAAE,mBAAkC;IACrD,WAAW,EAAE,aAA4B;IACzC,cAAc,EAAE,gBAA+B;IAC/C,SAAS,EAAE,WAA0B;IACrC,IAAI,EAAE,MAAqB;IAC3B,GAAG,EAAE,KAAoB;IACzB,aAAa,EAAE,eAA8B;IAC7C,aAAa,EAAE,eAA8B;CAChD,CAAC;;;;;;;;;;;;;AC7CF;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,UAAU,GAAG;IACtB,SAAS,EAAE,WAAyB;IACpC,IAAI,EAAE,MAAoB;IAC1B,OAAO,EAAE,SAAuB;IAChC,IAAI,EAAE,MAAoB;IAC1B,OAAO,EAAE,SAAuB;IAChC,QAAQ,EAAE,WAAyB;IACnC,KAAK,EAAE,OAAqB;IAC5B,MAAM,EAAE,QAAsB;IAC9B,QAAQ,EAAE,UAAwB;IAClC,MAAM,EAAE,QAAsB;IAC9B,OAAO,EAAE,SAAuB;IAChC,MAAM,EAAE,QAAsB;IAC9B,KAAK,EAAE,OAAqB;IAC5B,OAAO,EAAE,SAAuB;IAChC,KAAK,EAAE,OAAqB;IAC5B,KAAK,EAAE,OAAqB;CAC/B,CAAC;;;;;;;;;;;;;AChCF;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,YAAY,GAAG;IACxB,OAAO,EAAE,SAAyB;IAClC,KAAK,EAAE,OAAuB;IAC9B,QAAQ,EAAE,UAA0B;IACpC,QAAQ,EAAE,UAA0B;IACpC,YAAY,EAAE,cAA8B;IAC5C,SAAS,EAAE,WAA2B;IACtC,cAAc,EAAE,gBAAgC;CACnD,CAAC;;;;;;;;;;;;;ACtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACJ;AACD;AAQE;AAQK;AACJ;AACJ;;;;;;;;;;;;;ACrB5B;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,iBAAiB,GAAG;IAC7B,GAAG,EAAE,KAA0B;IAC/B,IAAI,EAAE,MAA2B;IACjC,OAAO,EAAE,SAA8B;IACvC,WAAW,EAAE,aAAkC;IAC/C,SAAS,EAAE,WAAgC;IAC3C,SAAS,EAAE,WAAgC;IAC3C,MAAM,EAAE,QAA6B;IACrC,QAAQ,EAAE,UAA+B;IACzC,QAAQ,EAAE,UAA+B;IACzC,QAAQ,EAAE,UAA+B;IACzC,WAAW,EAAE,aAAkC;CAClD,CAAC;;;;;;;;;;;;;AC3BF;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,aAAa,GAAG;IACzB,eAAe,EAAE,iBAAkC;IACnD,SAAS,EAAE,WAA4B;CAC1C,CAAC;;;;;;;;;;;;;AClBF;AAAA;AAAA;;;;;;;;;;GAUG;AAKI,MAAM,SAAS,GAAG;IACrB,IAAI,EAAE,MAAmB;IACzB,EAAE,EAAE,IAAiB;CACxB,CAAC;;;;;;;;;;;;;AClBF;AAAA;AAAA;AAAA;AAA+C;AAExC,MAAM,SAAS,GAAG,IAAI,4DAAc,CAAS,UAAU,CAAC,CAAC;AACzD,MAAM,kBAAkB,GAAG;IAC9B,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,GAAG;IACV,OAAO,EAAE,GAAG;CACf;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-aggregation-function',\n  templateUrl: './aggregation-function.component.html',\n  styleUrls: ['./aggregation-function.component.scss']\n})\nexport class AggregationFunctionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>aggregation-function works!</p>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'ClientTemporalGraph';\r\n}\r\n","<app-home></app-home>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule} from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { SelectGraphComponent } from './select-graph/select-graph.component';\r\nimport { SnapshotComponent } from './snapshot/snapshot.component';\r\nimport { DifferenceComponent } from './difference/difference.component';\r\nimport { GroupingComponent } from './grouping/grouping.component'\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport { TimeStampComponent } from './time-stamp/time-stamp.component';\r\nimport { NgxMatDatetimePickerModule, NgxMatTimepickerModule, NgxMatNativeDateModule } from '@angular-material-components/datetime-picker';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgxMatMomentModule } from '@angular-material-components/moment-adapter';\r\nimport { DefaultService } from 'src/gen/generatedAngular';\r\nimport { RestService } from './rest.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport { EnumKeysPipe } from './enum-keys-pipe';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport { GroupingKeyComponent } from './grouping-key/grouping-key.component';\r\nimport { AggregationFunctionComponent } from './aggregation-function/aggregation-function.component';\r\nimport { GraphCanvasComponent } from './graph-canvas/graph-canvas.component';\r\nimport {MatIconModule} from '@angular/material/icon';\nimport { DetailInfoComponent } from './detail-info/detail-info.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    SelectGraphComponent,\r\n    SnapshotComponent,\r\n    DifferenceComponent,\r\n    GroupingComponent,\r\n    TimeStampComponent,\r\n    EnumKeysPipe,\r\n    GroupingKeyComponent,\r\n    AggregationFunctionComponent,\r\n    GraphCanvasComponent,\r\n    DetailInfoComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatTabsModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    NgxMatTimepickerModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    NgxMatDatetimePickerModule,\r\n    NgxMatNativeDateModule,\r\n    HttpClientModule,\r\n    MatGridListModule,\r\n    MatListModule,\r\n    FlexLayoutModule,\r\n    MatRadioModule,\r\n    MatCardModule,\r\n    MatSlideToggleModule,\r\n    MatDividerModule,\r\n    MatButtonToggleModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [\r\n  DefaultService,\r\n  RestService  \r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { EdgeData, NodeData } from 'src/gen/generatedAngular';\n\n@Component({\n  selector: 'app-detail-info',\n  templateUrl: './detail-info.component.html',\n  styleUrls: ['./detail-info.component.scss']\n})\nexport class DetailInfoComponent implements OnInit {\n\n  public isNodeInfo: boolean;\n  public nodeData: NodeData;\n  public edgeData: EdgeData;\n\n  constructor(public dialogRef: MatDialogRef<DetailInfoComponent>,\n    @Inject(MAT_DIALOG_DATA) public data) {\n    if (data.edgeData) {\n      this.isNodeInfo = false;\n      this.edgeData=data.edgeData;\n    }\n    else if (data.nodeData) {\n      this.isNodeInfo = true;\n      this.nodeData=data.nodeData;\n    }\n    else {\n      this.dialogRef.close();\n    }\n  }\n\n  ngOnInit(): void {\n  }\n  clickClose(){\n    this.dialogRef.close();    \n  }\n\n}\n","<div *ngIf=\"isNodeInfo\">\n    <h1 mat-dialog-title>Label:{{nodeData.label}}</h1>\n    <div mat-dialog-content>\n        <h3>Id:{{nodeData.id}}</h3>\n        <h3>Properties:</h3>\n        <div *ngFor=\"let prop of nodeData.properties\">\n           {{prop.key}} : {{prop.value}}\n        </div>\n    </div>\n    <div mat-dialog-actions>\n        <button mat-button (click)=\"clickClose()\">Close</button>\n    </div>\n</div>\n\n<div *ngIf=\"!isNodeInfo\">\n    <h1 mat-dialog-title>Label:{{edgeData.label}}</h1>\n    <div mat-dialog-content>\n        <h5>Id:{{edgeData.id}}</h5>\n        <h5>Source:{{edgeData.source}}</h5>\n        <h5>Target:{{edgeData.target}}</h5>\n        <h3>Properties:</h3>\n        <div *ngFor=\"let prop of edgeData.properties\">\n            {{prop.key}} : {{prop.value}}\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport { Graph, TimeStamp, TimeDimension } from 'src/gen/generatedAngular';\r\nimport { Subject } from 'rxjs';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n@Component({\r\n  selector: 'app-difference',\r\n  templateUrl: './difference.component.html',\r\n  styleUrls: ['./difference.component.scss']\r\n})\r\nexport class DifferenceComponent {\r\n\r\n\r\n  public fromTimeStamp = null;\r\n  public toTimeStamp = null;\r\n  public dbName: string = null;\r\n  public timeDim = \"valid\";\r\n  public timeSpan: TimeSpan=null;\r\n\r\n\r\n  public drawGraphSubject: Subject<Graph> = new Subject<Graph>();\r\n\r\n\r\n  constructor(public restService: RestService) { }\r\n\r\n\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.difference(this.dbName, this.fromTimeStamp, this.toTimeStamp, this.timeDim === \"valid\" ? TimeDimension.VALIDTIME : TimeDimension.TRANSACTIONTIME);\r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  public onFromChanged(timeStamp: TimeStamp) {\r\n    this.fromTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onToChanged(timeStamp: TimeStamp) {\r\n    this.toTimeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.timeSpan = this.restService.getValidTimes(dbName);\r\n    console.log(dbName);\r\n  }\r\n\r\n}\r\n","<div class=\"content2\" fxLayout=\"column\" fxFill>\r\n\r\n    <div fxFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onFromChanged($event)\" label=\"From\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onToChanged($event)\" label=\"To\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <app-graph-canvas fxFlex [forceLayout]=\"false\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\" [showDiff]=\"true\"></app-graph-canvas>\r\n\r\n\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'enumKeysPipe'\n})\nexport class EnumKeysPipe implements PipeTransform {\n\n  transform(data: Object): Array<String> {\n    return Object.keys(data);\n  }\n\n}\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport * as cytoscape from 'cytoscape';\nimport { Graph, Node, EdgeData, NodeData } from 'src/gen/generatedAngular';\nimport { Observable, Subscription } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DetailInfoComponent } from '../detail-info/detail-info.component';\n\n@Component({\n  selector: 'app-graph-canvas',\n  templateUrl: './graph-canvas.component.html',\n  styleUrls: ['./graph-canvas.component.scss']\n})\nexport class GraphCanvasComponent implements OnInit {\n\n\n  @Input('drawGraphEvent')\n  public drawGraphEvent: Observable<Graph>;\n\n  private drawSubscription: Subscription;\n\n  private graph: Graph;\n\n  @Input('forceLayout')\n  public forceLayout: boolean;\n\n  @Input('showDiff')\n  public showDiff: boolean = false;\n\n  @ViewChild(\"canvas\", { read: ElementRef, static: true }) canvasReference: ElementRef;\n\n\n  /**\n * Map of all possible values for the vertexLabelKey to a color in RGB format.\n * @type {{}}\n */\n  public colorMap = {};\n\n  /**\n   * Buffers the last graph response from the server to improve redrawing speed.\n   */\n  public bufferedData;\n\n  /**\n   * True, if the graph layout should be force based\n   * @type {boolean}\n   */\n  public useForceLayout = true;\n\n  /**\n   * True, if the default label should be used\n   * @type {boolean}\n   */\n  public useDefaultLabel = true;\n\n  /**\n   * Maximum value for the count attribute of vertices\n   * @type {number}\n   */\n  public maxVertexCount = 0;\n\n  /**\n   * Maximum value for the count attribute of edges\n   * @type {number}\n   */\n  public maxEdgeCount = 0;\n\n  private cy: cytoscape.Core;\n\n  private coseLayout = {\n    name: 'cose',\n    // called on `layoutready`\n    ready: function () {\n    },\n    // called on `layoutstop`\n    stop: function () {\n    },\n    // whether to animate while running the layout\n    animate: false,\n    // number of iterations between consecutive screen positions update (0 ->\n    // only updated on the end)\n    refresh: 4,\n    // whether to fit the network view after when done\n    fit: true,\n    // padding on fit\n    padding: 30,\n    // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    boundingBox: undefined,\n    // whether to randomize node positions on the beginning\n    randomize: true,\n    // whether to use the JS console to print debug messages\n    debug: false,\n    // node repulsion (non overlapping) multiplier\n    nodeRepulsion: 8000000,\n    // node repulsion (overlapping) multiplier\n    nodeOverlap: 10,\n    // ideal edge (non nested) length\n    idealEdgeLength: 1,\n    // divisor to compute edge forces\n    edgeElasticity: 100,\n    // nesting factor (multiplier) to compute ideal edge length for nested edges\n    nestingFactor: 5,\n    // gravity force (constant)\n    gravity: 250,\n    // maximum number of iterations to perform\n    numIter: 100,\n    // initial temperature (maximum node displacement)\n    initialTemp: 200,\n    // cooling factor (how the temperature is reduced between consecutive iterations\n    coolingFactor: 0.95,\n    // lower temperature threshold (below this point the layout will end)\n    minTemp: 1.0,\n  };\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  openDialog(nodeData: NodeData, edgeData: EdgeData) {\n    this.dialog.open(DetailInfoComponent, {\n      data: {\n        nodeData: nodeData,\n        edgeData: edgeData\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this.drawSubscription = this.drawGraphEvent.subscribe((graph: Graph) => {\n      this.graph = graph;\n      this.draw();\n    });\n  }\n  ngOnDestroy(): void {\n    this.drawSubscription.unsubscribe();\n  }\n\n\n  draw() {\n    this.cy.elements().remove();\n    // set conaining all distinct labels (property key specified by vertexLabelKey)\n    let labels = new Set();\n\n    // compute maximum count of all vertices, used for scaling the vertex sizes\n    for (let i = 0; i < this.graph.nodes.length; i++) {\n      let node = this.graph.nodes[i];\n      labels.add(node.data.label);\n    }\n    for (let i = 0; i < this.graph.edges.length; i++) {\n      let edge = this.graph.edges[i];\n      labels.add(edge.data.label);\n    }\n\n    // generate random colors for the vertex labels\n    this.generateRandomColors(labels);\n\n\n    if (!this.forceLayout) {\n      let fallBackToForceLayout: boolean = false;\n      let latNyc = 40.730610;\n      let longNyc = -73.935242;\n      let elementDefinitions: cytoscape.ElementDefinition[] = this.graph.nodes.map((node: Node) => {\n        let elementDef: cytoscape.ElementDefinition = node;\n        let lat: number = -200;\n        let long: number = -200;\n        node.data.properties.forEach((property) => {\n          if (property.key === \"lat\") {\n            lat = parseFloat(property.value) - latNyc;\n          } else if (property.key === \"long\") {\n            long = parseFloat(property.value) - longNyc;\n          }\n        });\n        //Fall Back To Force Layout when a node doesnt have any coordinates and the spacial graph can not be rendered properly\n        if (lat === -200 || long === -200) {\n          fallBackToForceLayout = true;\n        }\n        elementDef.position = { x: lat * 60000, y: long * 60000 };\n        return elementDef;\n      });\n      if (!fallBackToForceLayout) {\n        this.cy.add(elementDefinitions);\n        this.cy.nodes().ungrabify();\n        this.cy.add(this.graph.edges);\n      }\n      else {\n        this.forceLayout = true;\n      }\n    }\n    if (this.forceLayout) {\n      this.cy.add(this.graph.nodes);\n      this.cy.add(this.graph.edges);\n      let lay: cytoscape.Layouts = this.cy.layout(this.coseLayout);\n      lay.run();\n    }\n    this.cy.fit();\n  }\n\n  ngAfterViewInit(): void {\n    this.cy = cytoscape(<cytoscape.CytoscapeOptions>{\n      container: this.canvasReference.nativeElement,\n      style: (<any>cytoscape).stylesheet()\n        .selector('node')\n        .css({\n          // define label content and font\n          'content': (node) => {\n            return node.data().label;\n          },\n          // if the count shall effect the vertex size, set font size accordingly\n          'font-size': '10px',\n          'text-valign': 'center',\n          'color': 'black',\n          'background-color': (node) => {\n            if (this.showDiff) {\n              let diff: string = node.data('properties')._diff;\n              if (diff === \"-1\") {\n                return '#D55';\n              }\n              else if (diff === \"1\") {\n                return '#5D5';\n              }\n              else {\n                return '#55D';\n              }\n            }\n            else {\n              let label = node.data().label;\n              let color = this.colorMap[label];\n              let result = '#';\n              result += ('0' + color[0].toString(16)).substr(-2);\n              result += ('0' + color[1].toString(16)).substr(-2);\n              result += ('0' + color[2].toString(16)).substr(-2);\n              return result;\n            }\n          },\n          'width': '60px',\n          'height': '60px',\n          'text-wrap': 'wrap'\n        })\n        .selector('edge')\n        .css({\n          'curve-style': 'bezier',\n          // layout of edge and edge label\n          'content': (edge) => {\n            return edge.data('label');\n            //No writing on edges\n          },\n          // if the count shall effect the vertex size, set font size accordingly\n          'font-size': '10',\n          'line-color': (edge) => {\n            let diff: string = edge.data('properties')._diff;\n            if (diff === \"-1\") {\n              return '#D22';\n            }\n            else if (diff === \"1\") {\n              return '#2D2';\n            }\n            else if (diff === \"0\") {\n              return '#22D';\n            }\n            else {\n              return '#333';\n            }\n          },\n          // width of edges can be determined by property count\n          // count specifies that the edge represents 1 or more other edges\n          'width': 5,\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': '#000'\n        })\n        // properties of edges and vertices in special states, e.g. invisible or faded\n        .selector('.faded')\n        .css({\n          'opacity': 0.25,\n          'text-opacity': 0\n        })\n        .selector('.invisible')\n        .css({\n          'opacity': 0,\n          'text-opacity': 0\n        })\n    });\n\n    this.cy.ready(() => {\n      if (this.cy) {\n        this.cy.elements().unselectify();\n        /* if a vertex is selected, fade all edges and vertices\n        that are not in direct neighborhood of the vertex */\n        this.cy.on('tap', 'node', (e) => {\n          let node = e.target;\n          let neighborhood = node.neighborhood().add(node);\n          console.log(node.data());\n\n          this.cy.elements().addClass('faded');\n          neighborhood.removeClass('faded');\n\n          let nodeData: NodeData = node.data();\n          this.openDialog(nodeData,null);\n        });\n        this.cy.on('tap', 'edge', (e) => {\n          let edge = e.target;\n          let edgeData: EdgeData = edge.data();\n          this.openDialog(null,edgeData);\n\n        });\n        // remove fading by clicking somewhere else\n        this.cy.on('tap', (e) => {\n          if (e.target === this.cy) {\n            this.cy.elements().removeClass('faded');\n          }\n        });\n      }\n    });\n  }\n\n  /**\n * Generate a random color for each label\n * @param labels array of labels\n */\n  generateRandomColors(labels) {\n    this.colorMap = {};\n    labels.forEach((label) => {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n      while (r + g + b < 382) {\n        r = Math.floor((Math.random() * 255));\n        g = Math.floor((Math.random() * 255));\n        b = Math.floor((Math.random() * 255));\n      }\n      this.colorMap[label] = [r, g, b];\n    });\n  }\n}\n","<div fxFlex #canvas class=\"canvas\"></div>\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { GroupingKey, GroupingType, TimeDimension, TimeField, ChronoUnit, ChronoField, KeysAndLabelsVertexKeys, KeysAndLabelsEdgeKeys, KeysAndLabels } from 'src/gen/generatedAngular';\n\n@Component({\n  selector: 'app-grouping-key',\n  templateUrl: './grouping-key.component.html',\n  styleUrls: ['./grouping-key.component.scss']\n})\nexport class GroupingKeyComponent{\n\n  @Input(\"groupingKey\")\n  public groupingKey: GroupingKey;\n\n  @Input(\"keysAndLabels\")\n  public keysAndLabels: KeysAndLabels;\n\n  @Output(\"groupingKeyRemoved\")\n  public groupingKeyRemoved:EventEmitter<GroupingKey> = new EventEmitter();\n\n\n  public labelSelection: string[] = [];\n  public propertySelection: string[] = [];\n\n\n  constructor() {}\n\n  public chronoFieldEnum = ChronoField;\n  public chronoUnitEnum = ChronoUnit;\n\n  public timeFieldEnum = TimeField;\n  public timeDimensionEnum = TimeDimension;\n  public groupingTypeEnum = GroupingType;\n\n  public isGroupingTimeDimRequired(groupingType: GroupingType): boolean {\n    switch (groupingType) {\n      case GroupingType.DURATION:\n      case GroupingType.TIMEINTERVAL:\n      case GroupingType.TIMESTAMP:\n      case GroupingType.TIMESTAMPFIELD:\n        return true;\n      default:\n        return false;\n    }\n  }\n  public isGroupingTimeFieldRequired(groupingType: GroupingType): boolean {\n    switch (groupingType) {\n      case GroupingType.TIMESTAMP:\n      case GroupingType.TIMESTAMPFIELD:\n        return true;\n      default:\n        return false;\n    }\n  }\n  public filterKeysForLabel(searchedLabel: string) {\n    if (!searchedLabel) {\n      return [];\n    }\n    //Check which Properties are used with the given node label\n    let applicableVertexKeys: KeysAndLabelsVertexKeys[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\n      let correctLabel = vertexKey.labels.filter((label) => {\n        return searchedLabel === label;\n      });\n      return correctLabel.length > 0;\n    });\n    //Check which Properties are used with the given edge label\n    let applicableEdgeKeys: KeysAndLabelsEdgeKeys[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\n      let correctLabel = edgeKey.labels.filter((label) => {\n        return searchedLabel === label;\n      });\n      return correctLabel.length > 0;\n    });\n    return applicableEdgeKeys.concat(applicableVertexKeys);\n  }\n\n  public groupingTypeChanged() {\n    //Change Detection GroupingType\n    switch (this.groupingKey.groupingType) {\n      case GroupingType.DURATION:\n        break;\n      case GroupingType.LABEL:\n        this.groupingKey.forVertex = true;\n        this.groupingKey.labelSpecific = false;\n        this.onVertexToggleChange(true);\n        break;\n      case GroupingType.NOTHING:\n        break;\n      case GroupingType.PROPERTY:\n        this.groupingKey.forVertex = true;\n        this.groupingKey.labelSpecific = false;\n        this.onVertexToggleChange(true);\n        break;\n      case GroupingType.TIMEINTERVAL:\n        break;\n      case GroupingType.TIMESTAMP:\n        break;\n      case GroupingType.TIMESTAMPFIELD:\n        break;\n    }\n  }\n  public labelChanged() {\n\n  }\n\n  onVertexToggleChange(forVertex: boolean) {\n    if (forVertex) {\n      if (this.keysAndLabels && this.keysAndLabels.vertexLabels && this.keysAndLabels.vertexLabels.length > 0) {\n        this.groupingKey.label = this.keysAndLabels.vertexLabels[0];\n        this.labelSelection = this.keysAndLabels.vertexLabels;\n      }\n      else {\n        //TODO: Display Error Message (Please select Graph or Graph is not suitable for this kind of grouping.)\n      }\n    }\n    else {\n      if (this.keysAndLabels && this.keysAndLabels.edgeLabels && this.keysAndLabels.edgeLabels.length > 0) {\n        this.groupingKey.label = this.keysAndLabels.edgeLabels[0];\n        this.labelSelection = this.keysAndLabels.edgeLabels;\n      }\n      else {\n        //TODO: Display Error Message (Please select Graph)\n      }\n    }\n  }\n  removeGroupingKey(){\n    this.groupingKeyRemoved.emit(this.groupingKey);\n  }\n\n}\n","<mat-card style=\"margin-bottom:20px\">\n    <mat-card-content>\n        <!--Grouping Type, always visible-->\n        <mat-form-field matLine>\n            <mat-label>Grouping Type</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.groupingType\"\n                (selectionChange)=\"groupingTypeChanged()\"><!-- [formControlName]=\"'groupingType'\" required>-->\n                <mat-option *ngFor=\"let groupingType of groupingTypeEnum | enumKeysPipe\" [value]=\"groupingType\">\n                    {{groupingType}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error\n                *ngIf=\"groupingForm.controls['groupingType'].hasError('required')\">\n                Must select Type of Grouping Key\n            </mat-error>-->\n        </mat-form-field>\n        <!--Decision if Grouping Key is for Vertices or Edges-->\n        <mat-button-toggle-group [(ngModel)]=\"groupingKey.forVertex\" aria-label=\"Font Style\">\n            <mat-button-toggle [value]=true (change)=\"onVertexToggleChange($event.value)\">Vertices</mat-button-toggle>\n            <mat-button-toggle [value]=false (change)=\"onVertexToggleChange($event.value)\">Edges</mat-button-toggle>\n        </mat-button-toggle-group>\n        <!--LabelSpecific, always visible-->\n        <mat-slide-toggle [(ngModel)]=\"groupingKey.labelSpecific\">LabelSpecific\n        </mat-slide-toggle>\n        <!--Label, required when labelSpecific GroupingKey is being selected-->\n        <mat-form-field matLine\n            *ngIf=\"groupingKey.labelSpecific || groupingKey.groupingType===groupingTypeEnum.PROPERTY\">\n            <mat-label>Label</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.label\" (selectionChange)=\"labelChanged()\"><!-- [formControlName]=\"'label'\" required>-->\n                <mat-option *ngFor=\"let label of labelSelection\" [value]=\"label\">\n                    {{label}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error\n            *ngIf=\"groupingForm.controls['label'].hasError('required')\">\n            Must select Label\n        </mat-error>-->\n        </mat-form-field>\n        <!--Property, required when Property Grouping is selected-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.PROPERTY && groupingKey.label\">\n            <mat-label>Property</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.property\"><!-- [formControlName]=\"'property'\" required>-->\n                <mat-option *ngFor=\"let key of filterKeysForLabel(groupingKey.label)\" [value]=\"key.name\">\n                    {{key.name}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['property'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--TimeDimension, required on all temporal Grouping Keys-->\n        <mat-button-toggle-group *ngIf=\"isGroupingTimeDimRequired(groupingKey.groupingType)\"\n            [(ngModel)]=\"groupingKey.timeDim\">\n            <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\n            <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\n        </mat-button-toggle-group>\n        <!--ChronoField, required on TimeStampField GroupingKey-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.TIMESTAMPFIELD\">\n            <mat-label>ChronoField</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.chronoField\"><!-- [formControlName]=\"'chronoField'\" required>-->\n                <mat-option *ngFor=\"let chronoField of chronoFieldEnum | enumKeysPipe\" [value]=\"chronoField\">\n                    {{chronoField}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['chronoField'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--ChronoUnit, required on duration temporal Grouping Key-->\n        <mat-form-field matLine *ngIf=\"groupingKey.groupingType===groupingTypeEnum.DURATION\">\n            <mat-label>ChronoUnit</mat-label>\n            <mat-select [(ngModel)]=\"groupingKey.chronoUnit\"><!-- [formControlName]=\"'chronoUnit'\" required>-->\n                <mat-option *ngFor=\"let chronoUnit of chronoUnitEnum | enumKeysPipe\" [value]=\"chronoUnit\">\n                    {{chronoUnit}}\n                </mat-option>\n            </mat-select>\n            <!--<mat-error *ngIf=\"groupingForm.controls['chronoUnit'].hasError('required')\">\n                Must select Property\n            </mat-error>-->\n        </mat-form-field>\n        <!--TimeField, required on TimeStamp and TimeStampField Grouping Key-->\n        <mat-button-toggle-group *ngIf=\"isGroupingTimeFieldRequired(groupingKey.groupingType)\"\n            [(ngModel)]=\"groupingKey.timeField\">\n            <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\n            <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\n        </mat-button-toggle-group>\n    </mat-card-content>\n    <mat-card-actions [align]=\"'start'\">\n        <button mat-button color=\"warn\" (click)=\"removeGroupingKey()\"><mat-icon>delete</mat-icon></button>\n    </mat-card-actions>\n</mat-card>","import { Component, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport * as cytoscape from 'cytoscape';\r\nimport { TimeDimension, ChronoUnit, TimeField, ChronoField, AggregationType, GroupingKey, GroupingType, KeysAndLabels, AggregationKey, KeysAndLabelsVertexKeys, KeysAndLabelsEdgeKeys, Graph } from 'src/gen/generatedAngular';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { GroupingKeyComponent } from '../grouping-key/grouping-key.component';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-grouping',\r\n  templateUrl: './grouping.component.html',\r\n  styleUrls: ['./grouping.component.scss']\r\n})\r\nexport class GroupingComponent {\r\n\r\n  //Currently entered DB Name\r\n  public dbName: string;\r\n  //Grouping Keys\r\n  public groupingKeys: GroupingKey[] = [];\r\n  //Aggregation Functions\r\n  public aggregationFunctions: AggregationKey[] = [];\r\n  public timeStamp = null;\r\n  public chronoFieldEnum = ChronoField;\r\n  public chronoUnitEnum = ChronoUnit;\r\n  public aggregationFunctionEnum = AggregationType;\r\n  public timeFieldEnum = TimeField;\r\n  public timeDimensionEnum = TimeDimension;\r\n  public groupingTypeEnum = GroupingType;\r\n  public keysAndLabels: KeysAndLabels;\r\n  public groupingForm:FormGroup;\r\n  @ViewChild(GroupingKeyComponent) childComponent: GroupingKeyComponent;\r\n  public drawGraphSubject:Subject<Graph> = new Subject<Graph>();\r\n  \r\n\r\n  constructor(public restService: RestService) {\r\n\r\n  }\r\n\r\n  addGroupingKey() {\r\n    this.groupingKeys.push({ groupingType: GroupingType.NOTHING, labelSpecific: false, forVertex: true });\r\n  }\r\n  \r\n  addAggregationFunction() {\r\n    this.aggregationFunctions.push({});\r\n  }\r\n  removeAggregationFunction() {\r\n    this.aggregationFunctions.pop();\r\n  }\r\n\r\n  ngOnInit(){\r\n    this.groupingForm = new FormGroup({\r\n      db: new FormControl('', [Validators.required]),\r\n      groupingType: new FormControl('', Validators.required),\r\n      label: new FormControl('', Validators.required),\r\n      property: new FormControl('', Validators.required),\r\n      chronoUnit: new FormControl('', Validators.required),\r\n      chronoField: new FormControl('', Validators.required)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * User presses Execute Button\r\n   * Triggers Backend calls.\r\n   */\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.grouping(this.dbName, this.groupingKeys, this.aggregationFunctions);  \r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  /**\r\n   * Change model when the user changes the db name in the according component\r\n   * \r\n   * @param dbName \r\n   */\r\n  public async onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.keysAndLabels = await this.restService.getKeysAndLabels(dbName);\r\n    console.log(dbName);\r\n  }\r\n  public trackByIndex(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n  public trackByIndexAggregate(index: number, obj: any): any {\r\n    return index;\r\n  }\r\n\r\n  public propertiesWithNumericalValues(): string[] {\r\n    let applicableVertexKeys: string[] = this.keysAndLabels.vertexKeys.filter((vertexKey) => {\r\n      return vertexKey.numerical;\r\n    }).map((vertexKey) => {\r\n      return vertexKey.name;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys: string[] = this.keysAndLabels.edgeKeys.filter((edgeKey) => {\r\n      return edgeKey.numerical;\r\n    }).map((edgeKey) => {\r\n      return edgeKey.name;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }\r\n\r\n  public isAggrTimeDimRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MAXTIME:\r\n      case AggregationType.MINDURATION:\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.AVERAGEDURATION:\r\n      case AggregationType.MAXDURATION:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrTimeFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MINTIME:\r\n      case AggregationType.MAXTIME:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public isAggrPropertyFieldRequired(aggrType: AggregationType): boolean {\r\n    switch (aggrType) {\r\n      case AggregationType.MIN:\r\n      case AggregationType.MAX:\r\n      case AggregationType.SUM:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n  public removeGroupingKey(groupingKey:GroupingKey){\r\n    this.groupingKeys.splice(this.groupingKeys.indexOf(groupingKey),1);\r\n  }\r\n\r\n}\r\n","<div class=\"content3\" fxFill fxLayout=\"column\">\r\n\r\n    <!--<form #createForm=\"ngForm\" [formGroup]=\"groupingForm\"></form>-->\r\n    <div ngFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\"></app-select-graph>\r\n        <br>\r\n        <button mat-stroked-button color=\"primary\" (click)=\"addGroupingKey()\">Add Grouping Key</button>\r\n        <br>\r\n        <div *ngFor=\"let groupingKey of groupingKeys;let index=index;trackBy:trackByIndex;\">\r\n            <app-grouping-key [(groupingKey)]=\"groupingKeys[index]\" [(keysAndLabels)]=\"keysAndLabels\"\r\n                (groupingKeyRemoved)=\"removeGroupingKey($event)\">\r\n                <!--[groupingForm]=\"groupingForm\"-->\r\n            </app-grouping-key>\r\n        </div>\r\n        <button mat-stroked-button color=\"primary\" (click)=\"addAggregationFunction()\">Add Aggregation Function</button>\r\n        <button mat-stroked-button color=\"warn\" (click)=\"removeAggregationFunction()\"\r\n            *ngIf=\"aggregationFunctions.length>0\">-</button>\r\n        <mat-card\r\n            *ngFor=\"let aggregationFunction of aggregationFunctions;let index=index;trackBy:trackByIndexAggregate;\">\r\n            <!--Aggregation Function, always required-->\r\n            <mat-form-field matLine>\r\n                <mat-label>AggregationType</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].aggregationType\">\r\n                    <mat-option *ngFor=\"let aggrFun of aggregationFunctionEnum | enumKeysPipe\" [value]=\"aggrFun\">\r\n                        {{aggrFun}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--for Vertex or Edge, always required-->\r\n            <mat-button-toggle-group [(ngModel)]=\"aggregationFunctions[index].forEdges\" aria-label=\"Font Style\">\r\n                <mat-button-toggle [value]=false>Vertices</mat-button-toggle>\r\n                <mat-button-toggle [value]=true>Edges</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!-- Property for regular aggregation Functions -->\r\n            <mat-form-field matLine *ngIf=\"isAggrPropertyFieldRequired(aggregationFunctions[index].aggregationType)\">\r\n                <mat-label>Property</mat-label>\r\n                <mat-select [(ngModel)]=\"aggregationFunctions[index].property\">\r\n                    <mat-option *ngFor=\"let prop of propertiesWithNumericalValues()\" [value]=\"prop\">\r\n                        {{prop}}\r\n                    </mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <!--Time Dimension for temporal Aggregations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeDimRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeDim\">\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.VALIDTIME\">Valid Time</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeDimensionEnum.TRANSACTIONTIME\">Transaction Time</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n            <!--TimeField Required for temporal operations-->\r\n            <mat-button-toggle-group *ngIf=\"isAggrTimeFieldRequired(aggregationFunctions[index].aggregationType)\"\r\n                [(ngModel)]=\"aggregationFunctions[index].timeField\">\r\n                <mat-button-toggle [value]=\"timeFieldEnum.FROM\">FROM</mat-button-toggle>\r\n                <mat-button-toggle [value]=\"timeFieldEnum.TO\">TO</mat-button-toggle>\r\n            </mat-button-toggle-group>\r\n        </mat-card>\r\n\r\n\r\n    </div>\r\n    <button fxFlex=10 mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <!--</form>-->\r\n    <app-graph-canvas fxFlex [forceLayout]=\"true\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\" [showDiff]=\"false\">\r\n    </app-graph-canvas>\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"wrapper\"> <!-- give it an id -->\r\n  <div fxLayout=\"row\" fxLayoutGap=\"16px\" fxFill>\r\n      <div fxFlex=\"100\" fxFill>\r\n          <mat-tab-group id=\"tab-group\"> <!-- give it an id -->\r\n            <mat-tab label=\"Snapshot\"><ng-template matTabContent><app-snapshot></app-snapshot></ng-template> </mat-tab>\r\n            <mat-tab label=\"Difference\"> <ng-template matTabContent><app-difference></app-difference></ng-template> </mat-tab>\r\n            <mat-tab label=\"Grouping\"> <ng-template matTabContent><app-grouping></app-grouping> </ng-template> </mat-tab>\r\n          </mat-tab-group>\r\n      </div>\r\n  </div>\r\n</div>\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { SnapshotRequest, TimeDimension, TemporalPredicate, DefaultService, TimeStamp, DifferenceRequest, Graph, GroupingRequest,GroupingKey, AggregationKey, KeysAndLabels, KeysAndLabelsVertexKeys } from 'src/gen/generatedAngular';\r\nimport { TimeSpan } from './time-span';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestService {\r\n\r\n  constructor(public defaultService:DefaultService) {\r\n  }\r\n\r\n  public snapshot(dbName:string,timeStamp:TimeStamp,timeDimension:TimeDimension):Promise<Graph> {    \r\n    let snapshotJson: SnapshotRequest = {\r\n      timeDim: timeDimension,\r\n      timeStamp:\r\n      {\r\n        predicate: timeStamp.predicate,\r\n        startDate: timeStamp.startDate,\r\n        endDate: timeStamp.endDate ?timeStamp.endDate: null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    let result = this.defaultService.snapshot(snapshotJson);\r\n    return result.toPromise();\r\n  }\r\n\r\n  public difference(dbName:string,from:TimeStamp,to:TimeStamp,timeDimension:TimeDimension) {\r\n\r\n    let differenceJson: DifferenceRequest = {\r\n      timeDim: timeDimension,\r\n      from:\r\n      {\r\n        predicate: from.predicate,\r\n        startDate: from.startDate,\r\n        endDate: from.endDate ? from.endDate : null\r\n      },\r\n      to:\r\n      {\r\n        predicate: to.predicate,\r\n        startDate: to.startDate,\r\n        endDate: to.endDate ? to.endDate : null\r\n      },\r\n      dbName: dbName\r\n    }\r\n    return this.defaultService.difference(differenceJson).toPromise();\r\n  }\r\n\r\n  public grouping(dbName:string,groupingKeys:Array<GroupingKey>,aggregationFunctions:Array<AggregationKey>){\r\n    let vertexKeys = groupingKeys.filter((key)=>{\r\n      return key.forVertex;\r\n    });\r\n    let edgeKeys = groupingKeys.filter((key)=>{\r\n      return !key.forVertex;\r\n    });\r\n    let vertexAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let edgeAggrFuncs = aggregationFunctions.filter((aggrFunc)=>{\r\n      return aggrFunc.forEdges;\r\n    });\r\n    let groupingJson: GroupingRequest = {\r\n      dbName:  dbName,\r\n      vertexKeys: vertexKeys,\r\n      edgeKeys: edgeKeys,\r\n      vertexAggrFuncs: vertexAggrFuncs,\r\n      edgeAggrFuncs: edgeAggrFuncs\r\n    }\r\n    return this.defaultService.grouping(groupingJson).toPromise();\r\n  }\r\n/**\r\n  public async getPropertiesForLabel(dbName:string,label:string):Promise<Array<string>>{\r\n    let keys:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return this.filterKeysForLabel(keys,label).map((key)=>{\r\n      return key.name;\r\n    });\r\n  }\r\n\r\n  private filterKeysForLabel(keys:KeysAndLabels,searchedLabel:string){\r\n    //Check which Properties are used with the given node label\r\n    let applicableVertexKeys:KeysAndLabelsVertexKeys[] = keys.vertexKeys.filter((vertexKey)=>{\r\n      let correctLabel = vertexKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    //Check which Properties are used with the given edge label\r\n    let applicableEdgeKeys:KeysAndLabelsVertexKeys[] = keys.edgeKeys.filter((edgeKey)=>{\r\n      let correctLabel = edgeKey.labels.filter((label)=>{\r\n        return searchedLabel===label;   \r\n      });\r\n      return correctLabel.length>0;\r\n    });\r\n    return applicableEdgeKeys.concat(applicableVertexKeys);\r\n  }**/\r\n\r\n\r\n  public async getKeysAndLabels(dbName:string):Promise<KeysAndLabels>{\r\n    let keysAndLabels:KeysAndLabels = await this.defaultService.getKeys(dbName).toPromise();\r\n    return keysAndLabels;\r\n  }\r\n\r\n\r\n  public getGraphs():Promise<Array<string>>{\r\n    return this.defaultService.getGraphs().toPromise();\r\n  }\r\n  public getGraph(dbName:string):Promise<Graph>{\r\n    return this.defaultService.getGraph(dbName).toPromise();    \r\n  }\r\n  public getValidTimes(dbName:string):TimeSpan{\r\n    //Backend Call for Valid Times for this db.\r\n    return {\r\n      start: new Date('01 Jan 2018 00:00:00 GMT'),\r\n      end: new Date('01 Jan 2019 00:00:00 GMT')\r\n    }\r\n  }\r\n\r\n}\r\n\r\n","import { Component, OnInit, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport { RestService } from '../rest.service';\n\n@Component({\n  selector: 'app-select-graph',\n  templateUrl: './select-graph.component.html',\n  styleUrls: ['./select-graph.component.scss']\n})\nexport class SelectGraphComponent implements OnInit {\n\n  @Output(\"dbName\") dbEvent = new EventEmitter<string>();\n\n  public graphs: string[]=[];\n  public selectedGraph:string;\n  constructor(public restService:RestService) {\n    restService.getGraphs().then((availableGraphs)=>{\n      this.graphs=availableGraphs;\n    });    \n   }\n\n  ngOnInit(): void {\n  }\n  public publishChanges(){\n    this.dbEvent.emit(this.selectedGraph);\n  }\n}\n","<mat-form-field matLine>\n    <mat-label >Select Graph</mat-label>\n    <mat-select [(ngModel)]=\"selectedGraph\" (selectionChange)=\"publishChanges()\">\n      <mat-option *ngFor=\"let graph of graphs\" [value]=\"graph\">\n        {{graph}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n","import { Component } from '@angular/core';\r\nimport { RestService } from '../rest.service';\r\nimport { TimeStamp, Graph, TimeDimension } from 'src/gen/generatedAngular';\r\nimport { Subject } from 'rxjs';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n@Component({\r\n  selector: 'app-snapshot',\r\n  templateUrl: './snapshot.component.html',\r\n  styleUrls: ['./snapshot.component.scss']\r\n})\r\nexport class SnapshotComponent {\r\n\r\n  public timeStamp = null;\r\n  public dbName: string;\r\n  public timeDim=\"valid\";\r\n  public drawGraphSubject:Subject<Graph> = new Subject<Graph>();\r\n  public timeSpan:TimeSpan=null;\r\n\r\n  constructor(public restService: RestService) {\r\n  }\r\n\r\n\r\n  public async onExecute() {\r\n    let graph: Graph = await this.restService.snapshot(this.dbName, this.timeStamp,this.timeDim===\"valid\"?TimeDimension.VALIDTIME:TimeDimension.TRANSACTIONTIME);    \r\n    this.drawGraphSubject.next(graph);\r\n  }\r\n  public onTimeStampChanged(timeStamp: TimeStamp) {\r\n    this.timeStamp = timeStamp;\r\n    console.log(timeStamp);\r\n  }\r\n  public onDbNameChanged(dbName: string) {\r\n    this.dbName = dbName;\r\n    this.timeSpan=this.restService.getValidTimes(this.dbName);\r\n    console.log(dbName);\r\n  }\r\n}\r\n","<div class=\"content\" fxLayout=\"column\" fxFill>\r\n\r\n    <div fxFlex class=\"selections\">\r\n        <app-select-graph (dbName)=\"onDbNameChanged($event)\" style=\"display:block;\"></app-select-graph>\r\n        <app-time-stamp *ngIf=\"timeSpan\" (timeStamp)=\"onTimeStampChanged($event)\" label=\"Timestamp\" style=\"display:block;\" [timeSpan]=\"timeSpan\">\r\n        </app-time-stamp>\r\n        <mat-radio-group [(ngModel)]=\"timeDim\">\r\n            <mat-radio-button value=\"valid\">Valid Time</mat-radio-button>\r\n            <mat-radio-button value=\"transaction\">Transaction Time</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n    <button mat-button color=\"primary\" (click)=\"onExecute()\">Execute</button>\r\n    <app-graph-canvas fxFlex [forceLayout]=\"false\" [drawGraphEvent]=\"drawGraphSubject.asObservable()\"></app-graph-canvas>\r\n\r\n</div>","import { Component, OnInit, ViewChild, Output, EventEmitter, AfterViewInit, Input } from '@angular/core';\r\nimport { TemporalPredicate, TimeStamp } from 'src/gen/generatedAngular';\r\nimport { NgxMatDatetimePicker } from '@angular-material-components/datetime-picker';\r\nimport { Moment } from 'moment';\r\nimport { RestService } from '../rest.service';\r\nimport { TimeSpan } from '../time-span';\r\n\r\n\r\n\r\nexport interface PredicateSelectOpt{\r\n  value:TemporalPredicate,\r\n  endRequired:boolean\r\n}\r\n\r\n@Component({\r\n  selector: 'app-time-stamp',\r\n  templateUrl: './time-stamp.component.html',\r\n  styleUrls: ['./time-stamp.component.scss']\r\n})\r\nexport class TimeStampComponent implements AfterViewInit,OnInit {\r\n\r\n  @ViewChild('startPicker') startPicker: NgxMatDatetimePicker<Date>;\r\n  @ViewChild('endPicker') endPicker: NgxMatDatetimePicker<Date>;\r\n\r\n  @Output(\"timeStamp\") timeStampEvent = new EventEmitter<TimeStamp>();\r\n\r\n  @Input(\"label\") label:string;\r\n\r\n  @Input(\"timeSpan\")\r\n  public timeSpan:TimeSpan;\r\n\r\n\r\n\r\n\r\n  selectedPredicate:PredicateSelectOpt;\r\n  predicates:PredicateSelectOpt[]=[];\r\n\r\n  constructor() {\r\n    let keys = Object.keys(TemporalPredicate);\r\n    for (const key of keys) {\r\n      if (key==TemporalPredicate.ASOF) {\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:false}); \r\n      }\r\n      else{\r\n        this.predicates.push(<PredicateSelectOpt>{value:key,endRequired:true});   \r\n      }\r\n    }\r\n  }\r\n  ngOnInit(){\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.startPicker._selectedChanged.subscribe(()=>{\r\n      this.publishChanges();\r\n    });\r\n\r\n    this.endPicker._selectedChanged.subscribe(()=>{\r\n      this.publishChanges();\r\n    });\r\n\r\n    console.log(this.timeSpan);\r\n  }\r\n\r\n  publishChanges():void{\r\n    this.timeStampEvent.emit(<TimeStamp>{predicate:this.selectedPredicate.value,startDate:this.startPicker._selected,endDate:this.endPicker._selected});\r\n  }\r\n  \r\n\r\n}\r\n","\r\n<mat-form-field matLine>\r\n  <mat-label>{{label}}</mat-label>\r\n  <mat-select [(ngModel)]=\"selectedPredicate\" (selectionChange)=\"publishChanges()\">\r\n    <mat-option *ngFor=\"let predicate of predicates\" [value]=\"predicate\">\r\n      {{predicate.value}}\r\n    </mat-option>\r\n  </mat-select>\r\n  <mat-error>\r\n\r\n  </mat-error>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"startPicker\" placeholder=\"Select a date\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate\" [min]=\"timeSpan.start\"  [max]=\"timeSpan.end\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #startPicker >\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n<mat-form-field matLine>\r\n  <input matInput [ngxMatDatetimePicker]=\"endPicker\" placeholder=\"Select an Enddate\" (change)=\"publishChanges()\" [disabled]=\"!selectedPredicate?.endRequired\" [min]=\"timeSpan.start\"  [max]=\"timeSpan.end\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\r\n  <ngx-mat-datetime-picker #endPicker>\r\n  </ngx-mat-datetime-picker>\r\n</mat-form-field>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { DifferenceRequest } from '../model/differenceRequest';\nimport { Graph } from '../model/graph';\nimport { GroupingRequest } from '../model/groupingRequest';\nimport { KeysAndLabels } from '../model/keysAndLabels';\nimport { SnapshotRequest } from '../model/snapshotRequest';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = 'http://localhost:2347';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Difference operation\n     * Performs difference operation on a graph\n     * @param differenceRequest Difference request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public difference(differenceRequest?: DifferenceRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/difference`,\n            differenceRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Return whole graph\n     * Returns the selected Graph in cytoscape format\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraph(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public getGraph(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public getGraph(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public getGraph(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getGraph.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<Graph>(`${this.basePath}/graph/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get available Graphs\n     * Get the names of all available graphs on server\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getGraphs(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;\n    public getGraphs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;\n    public getGraphs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;\n    public getGraphs(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.get<Array<string>>(`${this.basePath}/graph`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Get/Compute Keys and Labels of this database\n     * Labels and Keys for further processing\n     * @param databaseName Name of Database that should be returned\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getKeys(databaseName: string, observe?: 'body', reportProgress?: boolean): Observable<KeysAndLabels>;\n    public getKeys(databaseName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<KeysAndLabels>>;\n    public getKeys(databaseName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (databaseName === null || databaseName === undefined) {\n            throw new Error('Required parameter databaseName was null or undefined when calling getKeys.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n\n        return this.httpClient.post<KeysAndLabels>(`${this.basePath}/keys/${encodeURIComponent(String(databaseName))}`,\n            null,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * grouping operation\n     * Performs Snapshot operation on a graph\n     * @param groupingRequest Grouping Request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public grouping(groupingRequest?: GroupingRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/grouping`,\n            groupingRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * Snapshot operation\n     * Performs Snapshot operation on a graph\n     * @param snapshotRequest Snapshot request\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'body', reportProgress?: boolean): Observable<Graph>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;\n    public snapshot(snapshotRequest?: SnapshotRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected != undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        return this.httpClient.post<Graph>(`${this.basePath}/snapshot`,\n            snapshotRequest,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type AggregationType = 'AVERAGEDURATION' | 'MAXDURATION' | 'MAXTIME' | 'MINDURATION' | 'MINTIME' | 'COUNT' | 'MAX' | 'MIN' | 'SUM' | 'NONE';\n\nexport const AggregationType = {\n    AVERAGEDURATION: 'AVERAGEDURATION' as AggregationType,\n    MAXDURATION: 'MAXDURATION' as AggregationType,\n    MAXTIME: 'MAXTIME' as AggregationType,\n    MINDURATION: 'MINDURATION' as AggregationType,\n    MINTIME: 'MINTIME' as AggregationType,\n    COUNT: 'COUNT' as AggregationType,\n    MAX: 'MAX' as AggregationType,\n    MIN: 'MIN' as AggregationType,\n    SUM: 'SUM' as AggregationType,\n    NONE: 'NONE' as AggregationType\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoField = 'NANOOFSECOND' | 'NANOOFDAY' | 'MICROOFSECOND' | 'MICROOFDAY' | 'MILLIOFSECOND' | 'MILLIOFDAY' | 'SECONDOFMINUTE' | 'SECONDOFDAY' | 'MINUTEOFHOUR' | 'MINUTEOFDAY' | 'HOUROFAMPM' | 'HOUROFDAY' | 'CLOCKHOUROFDAY' | 'AMPMOFDAY' | 'DAYOFWEEK' | 'ALIGNEDDAYOFWEEKINMONTH' | 'ALIGNEDDAYOFWEEKINYEAR' | 'DAYOFMONTH' | 'DAYOFYEAR' | 'EPOCHDAY' | 'ALIGNEDWEEKOFMONTH' | 'ALIGNEDWEEKOFYEAR' | 'MONTHOFYEAR' | 'PROLEPTICMONTH' | 'YEAROFERA' | 'YEAR' | 'ERA' | 'INTANTSECONDS' | 'OFFSETSECONDS';\n\nexport const ChronoField = {\n    NANOOFSECOND: 'NANOOFSECOND' as ChronoField,\n    NANOOFDAY: 'NANOOFDAY' as ChronoField,\n    MICROOFSECOND: 'MICROOFSECOND' as ChronoField,\n    MICROOFDAY: 'MICROOFDAY' as ChronoField,\n    MILLIOFSECOND: 'MILLIOFSECOND' as ChronoField,\n    MILLIOFDAY: 'MILLIOFDAY' as ChronoField,\n    SECONDOFMINUTE: 'SECONDOFMINUTE' as ChronoField,\n    SECONDOFDAY: 'SECONDOFDAY' as ChronoField,\n    MINUTEOFHOUR: 'MINUTEOFHOUR' as ChronoField,\n    MINUTEOFDAY: 'MINUTEOFDAY' as ChronoField,\n    HOUROFAMPM: 'HOUROFAMPM' as ChronoField,\n    HOUROFDAY: 'HOUROFDAY' as ChronoField,\n    CLOCKHOUROFDAY: 'CLOCKHOUROFDAY' as ChronoField,\n    AMPMOFDAY: 'AMPMOFDAY' as ChronoField,\n    DAYOFWEEK: 'DAYOFWEEK' as ChronoField,\n    ALIGNEDDAYOFWEEKINMONTH: 'ALIGNEDDAYOFWEEKINMONTH' as ChronoField,\n    ALIGNEDDAYOFWEEKINYEAR: 'ALIGNEDDAYOFWEEKINYEAR' as ChronoField,\n    DAYOFMONTH: 'DAYOFMONTH' as ChronoField,\n    DAYOFYEAR: 'DAYOFYEAR' as ChronoField,\n    EPOCHDAY: 'EPOCHDAY' as ChronoField,\n    ALIGNEDWEEKOFMONTH: 'ALIGNEDWEEKOFMONTH' as ChronoField,\n    ALIGNEDWEEKOFYEAR: 'ALIGNEDWEEKOFYEAR' as ChronoField,\n    MONTHOFYEAR: 'MONTHOFYEAR' as ChronoField,\n    PROLEPTICMONTH: 'PROLEPTICMONTH' as ChronoField,\n    YEAROFERA: 'YEAROFERA' as ChronoField,\n    YEAR: 'YEAR' as ChronoField,\n    ERA: 'ERA' as ChronoField,\n    INTANTSECONDS: 'INTANTSECONDS' as ChronoField,\n    OFFSETSECONDS: 'OFFSETSECONDS' as ChronoField\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type ChronoUnit = 'CENTURIES' | 'DAYS' | 'DECADES' | 'ERAS' | 'FOREVER' | 'HALF_DAYS' | 'HOURS' | 'MICROS' | 'MILLENIA' | 'MILLIS' | 'MINUTES' | 'MONTHS' | 'NANOS' | 'SECONDS' | 'WEEKS' | 'YEARS';\n\nexport const ChronoUnit = {\n    CENTURIES: 'CENTURIES' as ChronoUnit,\n    DAYS: 'DAYS' as ChronoUnit,\n    DECADES: 'DECADES' as ChronoUnit,\n    ERAS: 'ERAS' as ChronoUnit,\n    FOREVER: 'FOREVER' as ChronoUnit,\n    HALFDAYS: 'HALF_DAYS' as ChronoUnit,\n    HOURS: 'HOURS' as ChronoUnit,\n    MICROS: 'MICROS' as ChronoUnit,\n    MILLENIA: 'MILLENIA' as ChronoUnit,\n    MILLIS: 'MILLIS' as ChronoUnit,\n    MINUTES: 'MINUTES' as ChronoUnit,\n    MONTHS: 'MONTHS' as ChronoUnit,\n    NANOS: 'NANOS' as ChronoUnit,\n    SECONDS: 'SECONDS' as ChronoUnit,\n    WEEKS: 'WEEKS' as ChronoUnit,\n    YEARS: 'YEARS' as ChronoUnit\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type GroupingType = 'NOTHING' | 'LABEL' | 'PROPERTY' | 'DURATION' | 'TIMEINTERVAL' | 'TIMESTAMP' | 'TIMESTAMPFIELD';\n\nexport const GroupingType = {\n    NOTHING: 'NOTHING' as GroupingType,\n    LABEL: 'LABEL' as GroupingType,\n    PROPERTY: 'PROPERTY' as GroupingType,\n    DURATION: 'DURATION' as GroupingType,\n    TIMEINTERVAL: 'TIMEINTERVAL' as GroupingType,\n    TIMESTAMP: 'TIMESTAMP' as GroupingType,\n    TIMESTAMPFIELD: 'TIMESTAMPFIELD' as GroupingType\n};\n","export * from './aggregationKey';\nexport * from './aggregationType';\nexport * from './chronoField';\nexport * from './chronoUnit';\nexport * from './differenceRequest';\nexport * from './edge';\nexport * from './edgeData';\nexport * from './edgeDataProperties';\nexport * from './graph';\nexport * from './groupingKey';\nexport * from './groupingRequest';\nexport * from './groupingType';\nexport * from './keysAndLabels';\nexport * from './keysAndLabelsEdgeKeys';\nexport * from './keysAndLabelsVertexKeys';\nexport * from './node';\nexport * from './nodeData';\nexport * from './nodeDataProperties';\nexport * from './snapshotRequest';\nexport * from './temporalPredicate';\nexport * from './timeDimension';\nexport * from './timeField';\nexport * from './timeStamp';\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TemporalPredicate = 'ALL' | 'ASOF' | 'BETWEEN' | 'CONTAINEDIN' | 'CREATEDIN' | 'DELETEDIN' | 'FROMTO' | 'OVERLAPS' | 'PRECEDES' | 'SUCCEEDS' | 'VALIDDURING';\n\nexport const TemporalPredicate = {\n    ALL: 'ALL' as TemporalPredicate,\n    ASOF: 'ASOF' as TemporalPredicate,\n    BETWEEN: 'BETWEEN' as TemporalPredicate,\n    CONTAINEDIN: 'CONTAINEDIN' as TemporalPredicate,\n    CREATEDIN: 'CREATEDIN' as TemporalPredicate,\n    DELETEDIN: 'DELETEDIN' as TemporalPredicate,\n    FROMTO: 'FROMTO' as TemporalPredicate,\n    OVERLAPS: 'OVERLAPS' as TemporalPredicate,\n    PRECEDES: 'PRECEDES' as TemporalPredicate,\n    SUCCEEDS: 'SUCCEEDS' as TemporalPredicate,\n    VALIDDURING: 'VALIDDURING' as TemporalPredicate\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeDimension = 'TRANSACTIONTIME' | 'VALIDTIME';\n\nexport const TimeDimension = {\n    TRANSACTIONTIME: 'TRANSACTIONTIME' as TimeDimension,\n    VALIDTIME: 'VALIDTIME' as TimeDimension\n};\n","/**\n * Temporal Graph API\n * API for Temporal Graph\n *\n * OpenAPI spec version: 1.0.0\n * Contact: ji67mary@studserv.uni-leipzig.de\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n */\n\n\nexport type TimeField = 'FROM' | 'TO';\n\nexport const TimeField = {\n    FROM: 'FROM' as TimeField,\n    TO: 'TO' as TimeField\n};\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}